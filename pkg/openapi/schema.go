// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfXPaOtb/Kho/O3N3Z4HwmraZ2dmhIW2zi01SnHbTmz4dYR9AYEteSw6YTr77M5Js",
	"YxtDSJvevffZ/lUCejk6Oi+/c3SkfjUc5geMAhXcOPtqBDjEPggI1V+OF3EB4eXgKv1afusCd0ISCMKo",
	"cWbYc0BJO0SxDw1kRlygCSCM7rFHXDSwxshhVGBCCZ0hRr0YeWwFIXIwB+TMcYgdOWXtjtLIn0DIEQvR",
	"PA7mQHkNcYFDgTB1EVAXrYiYI7ztJZvqXjXVRk4skM+4uKOnndzoiFDkAZ2JecOoGUTSHmAxN2qGJNs4",
	"267WqBkh/DsiIbjGmQgjqBncmYOP5er/FMLUODP+52TLuBP9Kz9ZRhMIKQjgFvZhy7SHh1o6uokpnj2B",
	"pb5ur1hbQ2SKRMWPLgOOKBMI1oSLmmxDERHIxzGawB0lfuARhwgvRk4IWIBbQ1MWIlhjP/DkTqUjEp62",
	"QHiGCeUi92My3R0VcyxKk/7htz3bmB+y+yycYUo2WO7wo3ufb6x1qpry4qA/hO4gZAtwxKMkJ+0OUZsN",
	"9QMIfdBDAhevmUtAGy8lx+eMipB5Vx6m8F43UT8yKoCqjziQyqGYeLLgckVfjUQx5EcfBHaxUMQlK3Fh",
	"iiNPKAYdR3lRxj6GRICmusjJhFgUSGpRsiK0tcmNHdZJw6LW+c+MN+d6rudabEK6IdcagCN/CWEmJc41",
	"zoxJs/dq0oHT+isMvXq3PXlRf9WddOvTbns6eYFPJxjAqBn3EHK9xPtWo/2i0TZqxoqFS49h94oxjxtn",
	"v341cCQYd7BH6EwRQyjxI/89KJK5cdZ8qBk+duaEKmKnHr5noSLDedE7fQlttz59hSf1bq/j1l/hDq73",
	"Wp0XvemLl9326UTxLh2q81Db2c3Px+/nssztvVu63ZfMjB61r0qiecAo19KMHQcCAe775MtqNUyHnmOO",
	"JgAUpd2UjVwRz5OGchp5U+J58lseU2ceMsoi7sWNO3rLIuU1AuZ5ytWEwFkUOqAG8BklgoWICC7Ns4i4",
	"ciOSQR5IMhpSTHIylqf2WCn8tSiGSrwJozZRu9Vutjv15ot6p2W3mmfd3lm398koM/0qZPfEBY4wRdgT",
	"EFIsyL1cjJ4XXMQFC/FMGS7ZNETapxEuQjKJ5HalLbATMs6l0wO0u5sNhN4AFlEIHM3JbF7H95h4eEI8",
	"EdcQoU4IPlCBPcQpDvicCa79FXaWUSB9n0s4TuTCYfcQxtqh8TkOwUVT4gHyWUQFR38OAbsnKylq0hfH",
	"f1GW9gnyn0i8x+hszkJqKPt+T6RqEjobqx01zoyILilb0bzKu8yJ1DoSDs+FCPjZyUk6VIOwE6NmzCMf",
	"0/eAXTzxwNKzDbezEUdvzzur/Sl+HXwaNIn99k3v07/+MTXHl7NPb980b8et6PZjy7sa/8O8/ZfnOaS/",
	"viSvu5OP68jZNAl+977pDNj9sON23LjXMePeveM79+aivzLPX21c3yGX7z4Fn/7lnk86s1eXi/7MPO+v",
	"R/Z1ZC5u2qa9nJn2TW+46HdH9kV8uei+dN96zcnbm7/ij9b9ZLG6T/++evd67r6dzT75Hp8MmuRy88E3",
	"F5fNW0mrpN1edoaLi3g0uOCjQT+yFpft0ceLtXneXZmDJTftfmQO+r3hoM/N89V6aF9EI/umOxx31yPb",
	"3Fj+SljjbjwamD3rvLkeLvota7DcDAfXkWVfdy17yc2FE43s2ca0P8xH427PXFzHo/GqN1wsY2twuR37",
	"vLs2F8vuSH5e3K6swXUPD24i075s39rLaGQve1as+vVGtiP7rIaDCz5cXLTNTb8rabM2y465+cStcXc1",
	"smdra9yMrbjbMwe3TbO56o3k94Pb9XAwWw0X1xtzc9O8ti9Ww0V/NRos4+Eg/zmha1DBow+MDDfdl87b",
	"N018/trHH9f8any5sD7exubi/fySvF5ejf9hmbazGS5ue5Z9y82LWWyed1vWot8xby7k57a5uFhZ41X+",
	"8yqZdzUcXK6Gcr8Ht50Pi4vN6LzbMhezpvUx15es8p/Tvuk8bSvOfW7O1tbGjKzFsmX52RjcXKg1rXfn",
	"vWkN7TwN28/X6vvb2NzSnvTt88Ka3wTCjLtNy77h1uAisuzZemhfRpbdl7zu3Ca8Nwe3qaxt1zFudoaL",
	"5cayb5rDwSwyNzcry56bUh6Gi37Tsq9bw4HTkjJnfjSFHMeKuytr0O+Y46Ycq2tJnRnM1ubgVv6+toiU",
	"sYuO1V4Ji3Q3ll7Dxjrvdi273xpdKL6szMVtS/OhH1uLm0zWRvZS8k/SuDYXs2hk37bNxQc2tFM5TfrY",
	"s07WX33O9EfKb2c0uIn1535rNHhjWmqs66a1ueHWRo617Fj2nA/t6/Vwcb0y7dt4aM8ic3Hbvj7Is9V6",
	"NO62zYHTGo1XLSkzo8EbnvHczvP8YpPKu/6cyruky+lamwu1V9LGmPYbbo67kj45rrYPi+XGzumGJeVo",
	"cNmzFha37FlkbW561uZWmEovzbU1uM6N0czGuH6cno4Vd9dyfyyyappjtSZ8SV7+9Urby7+ez/72N6Nm",
	"eMQB5auNfoCdOdTbjSYaJl9mGE5DtS2gazV6jZYCT5+PRU8598+rMFMfeYQLxKYocaYyRM31UShjgt0E",
	"4n4LyPhqQBiy0DgzCFXh6pcEOhk1/cuXIkkpsJowN0ZJF+NouKjnqljp+/ywU0wkJtOddBCtqK/JWFfk",
	"0F0WeSfh9R3FGVrTIBJNCXiuZlQx9uC/GST7BmCSQvFSvCwHcrunzaZ7CnV4ddqrdyfdbh2/bL6sv+xO",
	"J+0p7py+aLZL/RL8gR0f6g4LA2MbzirSMLRbr9wX9VZThi6nzVb9pdN26gAvoHl6OnnVcWDbJRlMsKDO",
	"wQlB7ANP2ZfgGk/QidIuHVaLUkIm2WdGpx5xvlMd0lH26AHeBgQqIyOFjmMfVOCPsCcRaqwzQvxZ9COZ",
	"LCWLJ4kgysQcwhqKeIQ9L0ZiTjjyAVMuSYrRHN9DkTjFoykLJ8R1gX4fk7Jh9nAp4hAiJwQXqCDY48hl",
	"Sl8zqjI9DUJyTzyYAX9Ga7LCHLlACbhoEiMciTkLCU9sieaUSgwiB0dcN5JEFRreUcGWQFOyCZ0VCecO",
	"C0BFf5ii/tVlZqTU2qWFor9sF3xHKTjAOQ7j3JIRo6pLFoMFHhZTFvpqrwhVgZs3hvAewgu56O/bNa4G",
	"+qL/rN64xAQLhvTqHQ8T/xl2pk9RRGEdgCNjT9UMMceJwhDc4pbgQksRYsoJUJH0wdS9o7IljxwHwJUc",
	"lCopwriBLqd6JKJYr/LEmEMNBR5groJfFgpEBMIqMCacR1ordrIZMsyVGkdmR3CcOQJEnYsQsG+cfa2y",
	"WxVJED18FOIsbbBDxe/aVaVpsW93Vd/mix5xONuIvZTWVsm6l71euzd16t2mg+vdl+1JHTvNF3Vw8MtJ",
	"szVpvnLaKhP1Y9J7udSdS/hS/svJBoyzXlOa5ufP5n3+5nTeI/53V561C6ZMvGERdb/PTlEmvkzlMHuM",
	"VA4Kgrv1x8XzmGcwWjdUIW/B0JRQF21dv1prRBN/sYHvXC92pGv4oj3WPtwRibl0pnq0BCo/h2GuGjd1",
	"ZZqwxBXMMUewDqTza+Qy/7y00AEEQF2gTnIKURYhDjqwyYUzOvWYJmcJ5QKr5OwEpiwEbdNz7VXST4DP",
	"nxBmZVTFkmciDhQwDkMclxK2uYa7xNM8GcjNmja0aQogFMmqtTJWZajzI6SHRQk9XISEzoz0MEcnw3/V",
	"Y33OWrGJtJo7eWbsquPrAhV5R3CIUalcy1HMtE/OlB7J5LFsXqZejVHbkvLoQhzm+0DdQ8ITpo3ALfBT",
	"yVGCI7ZihKdCpbd/Qykap1njA/KzKzSlHHO5+yD/M/IIXSr4KYpCJYeVEBILicNDsitelVnq8mTvZBMU",
	"Jm2Okdo0u727axPM4bSLgDpM7tj4w1skmzYQsuWm8DmLPBdJf4kIRRMm5sgjs7k++3ZxuJRr9IEXljaJ",
	"BVQRkSVxqpQv+RFFVKLt1Zw48zL/EOEoBIUY3cpVCjx7iszYsvlDPnt0dNcPaZeyTu3uX60kPFs+JNuS",
	"I+ARDbST9e3RPbl8JXdT4gmQTCmlpnJqddB8Cjyr5u9+tfqQwqxHhk6WWqFhJef0VL0nOkwNC0bqyEFy",
	"lu0hhxgf8RG/cPQOPF/Vc4j8wg77jHT4R/b6Q04oH3fU6fT8W2xnuneHd7iSkiwZGgSVYnb0BmC3avpi",
	"oJB60jIRpZTTrmwd62yTsGfssEABxwrPW9rMg76zqrLiR5KfYgU103OQfHDLdxN9R+57xaZWbH2CwMvz",
	"vwUKIXGSnIMPnOMZ1NQxPxZE+kOVhGMSlLd3Wbln1D6ScRIko2rFlYgaU1fXhylX9M62r5Im0l02kEr8",
	"cIRDUI7UTRuOJHRvI4mvyDQR8RqaREI11eNCUjcm6QsJCBzGad2CHFwb8v7VJUcqnSgBlByccUjH1dkx",
	"PZdcKdDIlxu8e2qQj4e+OB6RMVBtJ7aJKI+CgIUCZF8dNX1R21LLxlSpNaNWzlcJ8AMW4pB48ZeIZicj",
	"uY7ZrOkXsxBTUZpVfZdOmQ81c5lfH8ScuV/kr9jz2GqHdB9cgtNBttnQzxX+rCKaK0vGBwgnkueJpCH9",
	"6yTNOaoRHrf5+/N6VUq4E/L3i8VHR6Sw0gwHChjzUK54qZTcQskM+SZ31I+4QNjjTKJ1UKG2K/Ffvr5z",
	"mlSWVJircm1UlR9NGiV1kjpy0O1lUK92dlu26alQVysAIB+vZdcc1wkVMEuqAgumrkTJUcyu9jKVtVLY",
	"/aG+5rgob2cBlbFeRlYy6FGsqI6VqjKmSSqzVDdW5Mxu1q9KMNRhDauuJRYMRVyXGjMKMhygTGzNoa6D",
	"4jEX4Oucha4/VI2lOY1ZVIlrt1nF6sK1mQLFDGXpzAJ1hFYOehBG/jOCjIkpcizGXBNpa0JyDy6ahsxH",
	"xJfmJ93GyhlLac2nlgkWepflJ2PRdmHlCY8Sqfws+23ZXlO2K1WlwswnLTlvV2V8iiegGYddl0iSsHdV",
	"ClJKQFwjhXvsRdVxd7HDx4JVXkKseyI9sTJ8QeDFEkZQ5kKmVrmht6zNpawPLTpppvidpaK/HiTsCbmv",
	"LRlP3v2D4PIxl3Y82jwsgZKPhF7qgVq7KHRPMe3RNhEQC1EUuFjAs+P6/7h7eOIOfsee7QsStg2HUoU+",
	"SG2qIkrf+pAkaYqUwmnlqyERy9jV82KkTpylo8gOLqSQJ0lwB1N9YYW6sN7iIck1Cf7V9mIhIJRT/u+v",
	"zfqrfv0Trm8+//nvZ9u/6l8an782a6eth1yLv/z9T1XGY9+dgsMQ8HsvOqHnvPCCDtx38fF6qP4wzk47",
	"Sg/TP1sVzMjbseMwcNKjItWUnPAdEsF75kU+GIXDv/Ksb9Qv6HKgVnOY/HAvGrYyBJwQrEM/rKLBRDC5",
	"jNy0cU7SygkITqscpBesS1cGWz9ZAY53dDp/QHwAikqX6HmjqTor/YbjivLpR/lc+tGbRkSVq0wJhMXK",
	"/wl4jM6k63zcYZUm3TVxn7eXip6DF0fydpc7udP3Q/eZnoMn26mq2ZEOml/9njKo1IUkBkcJpueh/tXl",
	"ljQZMuk7BuqmAK9KAx8Ixu38MnM/JWUqLNCYzYsRjma+3AzFGRVSKJvls1DVawlYi0q8lsKj47xTzulU",
	"nwzmOHhVUR+xZ3ezdsoEqGgof8C9zfSklyGK1Rf5P1V2xIXSzzod8bnSTH2PxGuL9b4sM7sS7oK+k6NL",
	"X6rYIIgPRbHWlWMeCH34k502SWxVl82r9jOo5PoxFqxivyqUp9ykQotqT1QYpSON/GYUcd9PDXyiBu6R",
	"yif7tAPynNxLfh1Xc0zVHa7mLLu/nBfsSi4Ua8OOV5BkguMVhOxxMhEl/45yg2uQc9iZEJWqzVN+hDrY",
	"ujo2kVzCC/g7gd4LCWaT++Pq4JnRX0Ra73lHMY2LZlO2mQP2xDxJqevku0T/UyJ0PkXhK+pilRS/oxkF",
	"mm2NO1oVcyeosCrCUL/sapOuItupFyB8qUCdRMRvyesjcplqoF1+SvkGJwqJiMeOOopX+EodfxQLiHap",
	"GAWg08ApK3l6cjEBHKp82xIUtswNo0TLY6s0+aKOFdQv58yFnS9vQi93JU9DFhE3IkqWLKR1x2OR22Dh",
	"7ESTfHLfPin0lwGpxE5yOglgJUXfMKbqV4DA6idddkXolO1L02VRxRjCe+KAsqZBeoeT6y8TMVVZa74r",
	"ih6ZAnJix4M7qlOZ0jLuC5KRnFjOQjjy2CyJAJRdUkdM09KG3NGUilpWpLwtW07PoJAcRqWYZiCk8Kfl",
	"Ool+S7ZsA907OgH9UkNahI0nXMgoroolOW1NTZy+kqvWmutxR7erTArCOVKHDZrMODlmM4coKdVTdN3R",
	"OWBXn4wKIjwoJlxyO1Oo92w22o2mCnICoDggxpnRaTQbHR2oz5UAn+CAnNy3Clidn3wtvl7wcHL4GDw7",
	"Q8mdx6d7ImmegdjtNCRy8YVau+2NIsGKdVKMFpIoLFVcVZL6FkQ/IB9ao/waRoUV9PP0l25vt5vNff42",
	"a3dSdW/6oWZ0j+lbcRtKdW093rWykPOhZvSOmfdQkX7ebioAUG0xf/2sg8LcyzN7wMK2ycm+9zSk71vX",
	"C8VA9VnIosA4M3xMVP3FkfKYCIO/95j+0g880PirfIiSs0CZkKLC6w481Vx1O2JrvfZYLIn9QhbN5gXL",
	"V0NRMAuxqz4KhlLI37ij5cmkAQhhCiFQR2WstAqXKggnEXWlaqi78DBViRJFIGdTscIhZDUwFdUJaLtV",
	"GkJIK6mx6QRzwhOzynwJFe+oJh3QNKKORrTSwSD0PqFSW3YEa/12TeWLOOoEquJ9G13VxjlziMKCSQj+",
	"iKEoV1soNJ2kIPPS8U3m4bwkTt9iIfZd5fsPWolus/N4591rV6pn9/GeOxX1Pw1TKgUHnORRjlHFrelY",
	"P0LUv03GD1wD+inm/01inthsfvI1eznqp1P+f+qUn0n4ao92rXjPTIpswHiFlTxXZHOEEYXVzlJzFjO3",
	"kqKxvGL8UWt5lcj5VUpaFVJI3zaL95uE3PNnJ/vfPnvYscntIyKT8uNTf1BL/OoIiFW+Rf9bW+LnNZAn",
	"X8vPGz5kZwNVOTP1Pd9981Hn83IirxJGWx2+o7a+eiy7Yu5gXdObJb+y58f0zBp76KNycA/E3Zqg71Wh",
	"86onHv9bleCPAUd+evWfXv27vPrjvfa/yKsgQVSBCG5UlVmVfdxvGndBQSR+iEH7iRH+e8zjbxBjHZlf",
	"+CNB97ySgqefWKm4GfZ8GP47wPveB31/IvjfOYL/bbQzQ/ZHQfqcx8ojefxEXfg+OJ5K8k8A/ocD4L87",
	"y380vHsCrsspybd5im8HdiXV+OkxfuK5H+ox1DGLvqb6HcdIbyH334P8wgvRdPF9t284RXpcVbbP1D3P",
	"SVPFs3c/hf73f+T0GzuQw6q6T5f1Eiv+nx8W6kq0pLBN3zvJ16+pFln5l8ptScucvnsKIagXD1LVT/53",
	"HvlVLleT5aN0oVmao9DFh+olSBe5kX7OpliKiNBH5QvvKM5uRcjBce5a+c4zFegyub6ri5DTu8a7BWU1",
	"hLOCtSyXorLIOSZ4OE7/g4asKtCPPEHqAiimAhHOvOQBCEzdqmK43YLB9K7+NmlYkQtMOZsW+ie4QPKi",
	"jAZQvphdLjjdEDXbTmlJ8kyXyyhkeTcvRizMp9hqaM5WcJ8+3+Wpq28IB0HIsDNXxYvAOZp6sFbPcmC+",
	"h81J8k4/x8qQM2fqjQvmA0oeTNQX9Xh6hXs7M8kxHaOp/q8q9AU0Sc0dVYXXsA4gJFLAsv+TQulD9i7j",
	"eSLnxsPnh/8LAAD///B346h1bAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
