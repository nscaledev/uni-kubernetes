// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
