// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
