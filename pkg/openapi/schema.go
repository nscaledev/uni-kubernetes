// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
