// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9+2/btrr/CqF7gG24kiM7tpP4l4OsvesJzroGbdrde+bcgJY+21wkUoekknpB/vcL",
	"PvSWHL/SdrsBBnSxKPLj936RenACFieMApXCmTw4CeY4Bglc/xVEqZDAL15fZj+rX0MQASeJJIw6E+dq",
	"CciOQxTH0ENvUyHRDBBGdzgiIXr9ywcUMCoxoYQuEKPRCkXsHjgKsAAULDHHgVrSnVKaxjPgAjGOlqtk",
	"CVS4SEjMJcI0REBDdE/kEuHiLTXUvOXqMWphiWIm5JSOj0uzI0JRBHQhlz3HdYiCPcFy6biOAtuZFLt1",
	"XIfDv1PCIXQmkqfgOiJYQozV7v/GYe5MnP84KhB3ZJ6Ko9t0BpyCBPELjqFA2uOjm83+FlO82AKlsRmv",
	"UesiMkey5WHIQCDKJILPREhXjaGISBTjFZrBlJI4iUhAZLRCAQcsIXTRnHEEn3GcRIpS2YxEZCMQXmBC",
	"hSw9tMtNqVxiWVv0T0/2nDDPQn3GF5iSP7Ci8JO0Lw82MtUOeXXSZ4E74ex3COSTINtx66DNp3oWQDks",
	"NkGtGYZICFSSOQHeAWw23TPA+mimBCF/ZCEBo2i1zL1iVHIWXUaYwnszRD9kVALV/4sTJcia4Ee/C7Wr",
	"B8cKsfrfGCQOsdTA2Y2EMMdpJDWONoO8Kg+/ciLBQF3FpgUWJQpaZHeECvvRa6BOKUG9z3/muHll1jrU",
	"Zi3ojtprAoF6YgkZOhNn5o/OZscw9s4wjLzhYHbinQ1nQ28+HMxnJ3g8wwCO69wBF2aLd/3e4KQ3cFzn",
	"nvHbiOHwkrFIOJPfHhycSiYCHBG60MAQSuI0fg8aZOFM/EfXiXGwJFQDO4/wHeMajOBkND6FQejNz/DM",
	"G46OQ+8MH2Nv1D8+Gc1PToeD8UzjLpvq+NFtUPN6c3re1rHdSdKCLrnK34iumqNFwqiAsttgOei9fbQ7",
	"dTXXEEaviEbCwB8ce/6Jd9y/6vuT4WgyHP1LSfEWyK2hs6af1UThcOz74Rg8OBuPvOFsOPTwqX/qnQ7n",
	"s8EcH49P/EHtvV/MpDiIwQsYT5xCfWrQMAz6Z+GJ1/cV+439vncaDAIP4AT88Xh2dhxA8YqdTLLEExBw",
	"kObRHVG8Sejig8QyFUatmh8h3FnI3wMO2xjivG76e07DkxG70Pe3FwLvSODr3Sgs2skbESERm9fJLDSd",
	"G4pD6YeA0TlZbEBzFkiQnpAccOxMHtpWb9E3ZvqU6znaofiG9Ulmf3Znt9346QmmKaxhzdfVVvF0NBqM",
	"5oE39APsDU8HMw8H/okHAT6d+f2ZfxYMHPfZ7GjJRoZE3Kp/BfkDnMlIWdBvyWx2K8kmH7dz7jetKl94",
	"99vn3eudmfcJ/d/kYGMCUkpuGadeELE0vAkYh5sYE3qT3C5uWAIUJ+QmYHHM6A0OAkgkhGUeb4u/jD+5",
	"xALNACjKXtNB/D2JIhXJz9NoTqJI/SpWNFhyRlkqolVvSv+HpTqtkbAo0rkQDoKlPAA9QcwokYwjIgUS",
	"mp90nkNhKILcpGyxqxkObXCym9kBzhl3Jg6hOilyY/fvuObJTRVDGXZmLFwh+4qzscbaYlsGrBaWeF+G",
	"YI6JooGZ32R19EZdxLjFvRmdp4JsvmdKcU4dEymgOYEo3JqplDsQkWBP5GezdGAdFzyks0wKboFj0MkM",
	"hCMOOFyZLJf40tSwcGU7EDYPRplcAndRKlIcRSskl0SgGDAVCvoVWuI7qO5jW8zPGZ+RMAS6H+rzaTpw",
	"nwrl9HHQ+RgcCRQyzUj5BnIGSji5IxEsQHwdibjHAoVACYRotkI4lUvGibDyYPCvs60owKkwgxT8lYFT",
	"Ktkt0GyHhC6qexQBS0BrLEzR+eVFLmgaTUrK6HcFbqaUQgBCYL4qYQcxql/RVjQEjpIIyznj8bYcQKgE",
	"TnH0Afgd8P9S+NmPF4SeyGK6nR2sxpEMGUQFESbxl6X3OUUphc8JBMoq6WGIBUHKOYRVQuPKSMkxFQSo",
	"tO9gGk6pGinSIAAIFV2UppF81UMXczMT0QTVKX0swEVJBFgohkgYl4hIhIVahgiRbi3BlMmfWErD/YhG",
	"mbyZq2k6KFYyAxAWirRaHPiyFPxI8SwCxURzQkNUqPdtMZhSK71/wJ5YVF6OEDdGf3SZoVQulRY0s1nj",
	"+4V5vw2ETAeZPVjBVP4bfE6U1mrBqnG4m+tbDWA842eIhvpnJ77n9z2/f+X7E/1fHg2d4dNgfHzie0Nf",
	"BTHhEHtnIfa9k/HJaTgf+kF4FhbR0KI37C3JYhlD3MN93+/1F72+v5hVApIk/QnHJFo5E+eCSojQfwOj",
	"6DLCktA0Rqf9sX+Fvv9wu4rwLfzguOoN4UyGrg0XBr7rLJJUzRWxBQlw9IqlCgkD14khZnzlTMZD14lZ",
	"CJFeREhCA4neXgxGvgqflitReq2vAhcaao47f/tawZpNczzYInrYhZjr4ws7aHtWITFewLPFzQNvMLjq",
	"Dyb+cNI/zjkFj4fzs8H4zDseg+8Nj/sDb3Ya9r3RIDw7Dkfjs9lJKW5OZ+lg4A89FSiOemNvkaTeaDDq",
	"nY56/sg7CSAc9kfDMt9Ykoec3IEiVT7asaRW0aVz3vcVif9h/xn4vnNdou8vny5eX5zradlc3mMOn0zM",
	"qjPwRfxnQ9hRb6zG3hEuUxzZ4F49y37YLrm4Aw3XM4gZg3RhGXPQERuWROlx65MTUfZkcrXYWnDAYTP6",
	"bMll6/xDAlzaKlyZXw6kam1O5INy7MLMnVcAvs3WyuqBpp7yWwHEtevIVaLrvDM1RzP1bgo538hOMyN7",
	"iI2Jtk1156pdh0iIxS41jxwUzDletWbtzquVvg2S2FmmCCWMRahUKaylt5FdoTxkSuNUSIQjwZSPCdqX",
	"CRGhlcaPOWCZchAtlK0XItuyMHaQbaBQSM1ST8prwlHE7ot+jkhb/SU2EMT4s3pVLWwxp+KERV6FL9G7",
	"Bkkb2duTrA2YWwuTOPxWJLhQ7Vvl5D6olzqlxE66EdY+2OWfxFpmBWv13CoSm4nWNh7SyRHW3o8kmYpY",
	"dbsSo4CICQXUfsicQDilOjWxEhJik/MzfQF6sIp+VywtMZiQXMneYzmRu6a3QzKUZ5Ar0BHaOmme622b",
	"858p5Ei0A3sIXSlrJJYsjXTjUQjKlIdozllsLBnKyNi6Yi2TvG35vvJ2nX9yFBUbqy+4EUuVV+lWe51a",
	"r8lVtYaJrbZcVsGPrhPhGRjE4TAkCiQcXVYWq0NrcI/ucJRCK0mqL/xaUeC3sDJvIrOw1pFJEq1USE9Z",
	"CLlYlaYuUFuqEqzbtB2m8Z1n/x/WApY1W9V2U+MIPVMBxtbUX2uMn7J+m1vn9Ryo8EjohZmov4HV7vCN",
	"unQiqCg3TUIs4St5S1/diGxJ5z0o+7TrVe2ZW+917dt0jA7ZfIrW9J7G+PPP+g9nMj7W/Jz92W/RSGV9",
	"sJnbad9o8m9WnFxHpDsWpTE4lbplfdWf9BN08VrvZj34vNMB/SV3Oi3ApkaHdcGOBLqeIVRAapSczT5Z",
	"vzNLjitr4imTAIW9afFHG1y/dZasAf4boMBJYLO8MQiBF+A2AlaGU7kcNGnRMes5UvwCdlZrruBzgmlo",
	"2Fcj4R9XV5d2SMBC6CGdlRc6Yp5hYZLMauC7c7V65nEFtkoxS01wbeYFy9cKPk5AYr7KaqZqckOV88sL",
	"gXSxKQsBmIDCk0OzlV1L7RRoGiv10yx2ljOpN0FEgKpf61nRlIo0SRiXoN41KZ8bTUI3n1OXSJReqxYT",
	"JMQJ45iTaHWTUnyHSaQCp9KL+arZDwuOqaytqn/LliynvkslxBjkkoU36qmOlBqgxxASnE1SFMCuW6Sk",
	"JQ9c54xPwGcK55bTkHk6y2pHeoannYDuosv1flJS6OyflXP0SflJbexttLLSWkZpaVfKuFUukqvECr4u",
	"nSnGyysJSr3bxFCAqTnOQEP4XATFytIp7tfChqUErpb839987+zc+xf2/rj+/u+T4i/vpnf94Lvj/mNp",
	"xA9//1ubW7gFIspdM2uCReW0RtG7uU5QHtiZqEWlDzXVU+/refLoQdElX+20mEHE6EL5wU8zXm3RJrdd",
	"b4fmp8Px58DwhsRt4rzUE7Xu2MQhMF0stTeSG95pA/i8MyFzNa2Aa/McRcpuFLvggENhGnyUV96Sclir",
	"Aa/KGCk9stVYlpgIMFohnC5iRWKNRJ2g0BYuZjqjTCV8lq3RXxZsHYhbWnVia1i2I10uW9rmOtgrH6dt",
	"u87YlAuihdFO6S1l97TWlFf+Uxu6EGqPjWW53k958i8lyMbHfN+Mvh4aHGkaxky9qA25ksRQlVbTIhKB",
	"BJ2anDMeY+lMHBVVemp4G+8lrbQ8sGVoYZgW9VEf0qJH3C31gBb9bevuAuK79rBPQIypJEGei6ua/Lvp",
	"NPzP6bRX+mdfs97BMM9pxtdwpT2b+eOqnSV1m9D9kuVnOMvs2ar5qmXRzdncLrA5m5MOC5hS8u+0NLkJ",
	"LpvRMAt1wPHkzk0OZ4OdZzM+sXNc3bedftN912SM6FCijPINROzK9PZZ8SKi4h5bz/j3VOSHf5WdDRn9",
	"TmZ9ZVOK6apqC9SYJeBILm3IZ4JD5ZzPiTSJbB2Q0xDroG1KcwjMvntT6jwZOWzUOtAm5+bJF8nEdVqE",
	"jfJxO+x354zdrmttgd8Z5qBAaUk5/boEmwYA+3rGixiFEJJAi10pB2XhnzEWAaZa2RQNMy0gcdDFnxi9",
	"uvyI5npc2dtD0Fv0kO6PKHJvPFgSCYFMeYd6S7pco6L0+eryo2hLH7l53qz5No5ZSnViFJIlxMBxhNRo",
	"FZK++bF9Ntv2cTBuWiSpYaWiy2c9qGaUBpH8uEEBVyMvn9yi40CMuTbZnHcLbZhg3kXptKSft8X+W9OW",
	"1dzHm8uPFUbtPe2DbLjaz8Scku7CXH3lZ8JhvvkDYLFdRamNVLKXTV1VbZlrY307oiTrby4/CpRnBxEW",
	"SADQLJH07kO75HaJl8b2U0KVt++t4ZNWBqk197XGd3ZIfYffB5iH4odip+2AZc1kh+WMT2bWujaxi2Xo",
	"KOmV6kbdKmH31jcFRK0oVDQwoJWDYdtd5+o2yut9pVe3BLQwADXNAn81N0dv6st4OXqpN7afspW2pssS",
	"kTkiVEgcRdDSNpS1Yj4xiQ063ax33zJOrqi64gyInkf9/mxb67+OHFukHYaGHY5qp4Qc2pnKGamjofZg",
	"CzUmb+nKPfS+PlXnb1C0+vgwBP3U2FM9nMASqXVKhWBthE3/lAktyiq53KnslgIV18F0dSAdvdYr3bJF",
	"+Tn8LmNI9nW62vi7uukLTYOEQ64zM92X/1tucKuKZrn3/HDmy6QEW2v6tnWhreionzRBNKe06+NfqwBO",
	"Pdo8RNITNQVGKREIUk7k6oPaq62/6ZaA6hmbJhTvEjDtwVn6RmTV/Blgrpsrb0E3QJSm0fmoiN1nnXa6",
	"1K6fvGIhNH78yCNn4iylTMTk6MgUn+SqV6FHj/HFkQH56G5wVHlf2e+AJXpbiiIKoh3m1O9VaKofmZMC",
	"hM5ZV09m3vryAfgdCUCXm+yBR+XS6x8zUY0UXprpr4jMAQWrIIIpNX2rMdDOXiekFlarEJGFFdFKqwCm",
	"2y7mNYJMaQaFm+uE4khm5jAgNY3uJ1yARBgJkKYZ22YcFVqK2veUzsBc7ZcdMMUzITkOZBtKShnCLB9s",
	"jsjrvZbemNJil/awq0C6Cd2AubKtJ29/RvbsjYZrSpeAQxvcEhlBtbuuRJnKfQp+b9DzldRaAXcmznHP",
	"7x2bRP5SM/ARTsjRXf+oXHUVRw/V6+4es37+uPPMwEWcRGAKgvUO5RLFM0L1UOVKM5FhSp+0Lbilg0OU",
	"U8hZulhWOM1FabLgONT/KxnKqkq9Ka0vphDOYQ4caKDb2AzKIESlY05oltIwAsMSIcx195QGMFPq2Xui",
	"5agEKnSwSRMrrjTF0hkWRFg2ZrEKFabUgA5ontLAlFiVQCP03kJpJAnBZ3O5ZOuVlbq9u+UCSnOiUAgW",
	"EJ03tMVrxUwLaIl2lavboKI5DW+D9zJ3qGlYpkf1DRxvQJ4n5FP/XZml3lUY6lWNnWqXmg18v8ue5eOO",
	"uq7GenSd4Sbv73czhV6lf9BVWo/A6nWOD7pO87oBvcjwoIs0TkQ/us7owGRZd2q+7BfowmG7R/Dbte7X",
	"KF/F21FkLIYcdV0wqqfaTqG2aNLsoFKuK9fJqS78ZnM9h4juJptrrmN6Ec8X8fz2xdPaSHH0kF+l++IE",
	"/UWdoANxl/vkqy0XPD9eu07C2gpNrzTYAmFE4b6x1ZKmL+2kquQvmXhSy19aPr/MQGvzzLILlFfd6qF0",
	"x/JR9wXLjw1bMtjWz3uxI3vakbODLtK4NOwbtiOH1f5HD/XL7B/zXsa2hJf+XTRv+DcNQCV51tmeQkFN",
	"6ZWtgGAUYBFgc0glz1zld/mZlY1DaA5jQVg5QFbVDgagffXDq7YL/beV8H1uPnxRAy/u5Lbu5IvT9uK0",
	"7eW0Pf1W9xdotMeXtjh8H3W7a5uF6DYOTZ8vlc+i0r+uC/hiIF4MxJ/NT9wws/dnCj7LeggicxVny/VX",
	"h4tC9wg/O797s5MC6v4wwot6eQlDv4p6yePPjQLPkldRjjfxlsK8X9CYCc9LmPjiBfzpwsRvznhvHIRs",
	"EX2U1MRuxn738KOmHL4Bo/+ib170zZ/aLdBuq7kGdY82gzdQ+i7td6KS1qp+QWyHLoOntUHxIbTDdCK0",
	"fFjtRVhfhPUrtSR8UdO/uYoxXe3i6CH7Nu/jUedZ0pI+sGeVN+pcErpSVVEmeY+/XcsksPNvsiyxKD6M",
	"sJO2eW+29d5u6ie7pV30yl4fYfjLKZwXOT1qfhR7T4HrOiVTEhlzfmdvcSuftnk+absw+3l2Yat9xuJF",
	"1v6fyNrj4/8FAAD//9xYcGphgwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
