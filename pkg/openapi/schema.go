// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7jWeh/L95HdezoOHy4f/DwAA//8T1LWHQmoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
