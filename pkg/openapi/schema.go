// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a28bOZJ/hehbYHdxktySJdnWl4UnuckaM5kYsZO925HPYHeXJK67yV6SbUdj+L8f",
	"+Og3JevlJDNnYICM1exisapYb7IfvZAlKaNApfAmj16KOU5AAtd/hXEmJPCLt5f5z+rXCETISSoJo97E",
	"u14AsuMQxQn00PtMSBQAwugexyRCb3+5QiGjEhNK6BwxGi9RzB6AoxALQOECcxyqKTtTSrMkAC4Q42ix",
	"TBdARQcJiblEmEYIaIQeiFwgXL6lhpq3OnqMmliihAk5pePjCnREKIqBzuWi53U8onBPsVx4HU+h7U3K",
	"1Xodj8O/M8Ih8iaSZ9DxRLiABKvV/4nDzJt4/3FUEu7IPBVHd1kAnIIE8QtOoCTa01Mnh/4eUzzfgqSJ",
	"Ga9J20FkhqTjYcRAIMokgi9EyI4aQxGRKMFLFMCUkiSNSUhkvEQhBywh6qAZ4wi+4CSNFadyiETkIxCe",
	"Y0KFrDy0002pXGDZmPR3z/aCMS/CfcbnmJLfsOLws7yvDjZ7yo15HeiL4J1y9i8I5bMo23HrsC1AvQii",
	"HOabkNYMQyQCKsmMAF+BbA7uBXB9MiBByB9YRMAoWr3n3jAqOYsvY0zhoxmiHzIqger/xanayJrhR/8S",
	"alWPnt3E6n8TkDjCUiNnFxLBDGex1DTaDPP6fvgHJxIM1nVqWmRRqrBFdkWotB+9FumUEtTr/KmgzRsz",
	"16EWa1H31FpTCNUTy8jIm3iBPzoLjmHcPcMw6g4HwUn3bBgMu7PhYBac4HGAAbyOdw9cmCXe93uDk97A",
	"63gPjN/FDEeXjMXCm/z66OFMMhHimNC5RoZQkmTJR9AoC2/iP3W8BIcLQjWysxjfM67RCE9G41MYRN3Z",
	"GQ66w9Fx1D3Dx7g76h+fjGYnp8PBONC0y0EdP3Va3LzZnJ93TWqvZGnJl0Llb8RXLdEiZVRA1W2wEvTR",
	"Ptqdu1pqCKPXRBNh4A+Ou/5J97h/3fcnw9FkOPqn2sVbELdBzoZ+VoCi4dj3ozF04Ww86g6D4bCLT/3T",
	"7ulwFgxm+Hh84g8a7/1igOIwgW7IeOqV6lOjhmHQP4tOun1fid/Y73dPw0HYBTgBfzwOzo5DKF+xwCRL",
	"uwJCDtI8uidKNgmdX0ksM2HUqvkRop03+UfAkUsgzpumv+e1PBmxC39/fWXwjgy+2Y3Dws3emAiJ2KzJ",
	"ZqH53FIcSj+EjM7IfAOes1CC7ArJASfe5NE1u0PfGPAZ1zDcWHzH+iS3P7uL227y9IzQlNaw4etqq3g6",
	"Gg1Gs7A79EPcHZ4Ogi4O/ZMuhPg08PuBfxYOvM6L2dGKjYyIuFP/CvIbeJORsqDfk9lcrSTbcuyW3O9a",
	"Vb7K7vcvuzc7C+8z+r8twcYEZJTcMU67Ycyy6DZkHG4TTOhteje/ZSlQnJLbkCUJo7c4DCGVEFVl3BV/",
	"GX9ygQUKACjKX9NB/AOJYxXJz7J4RuJY/SqWNFxwRlkm4mVvSv+HZTqtkbI41rkQDoJlPAQNIGGUSMYR",
	"kQIJLU86z6EoFENhUrZYVYAjG5zsZnaAc8a9iUeoTorc2vV7HfPktk6hnDoBi5bIvuJtrLG2WJZByyES",
	"H6sYzDBRPDDwTVZHL7SDGLe0N6OLVJDN90wpLrhjIgU0IxBHWwuVcgdiEu5J/BzKCqrjUoZ0lknhLXAC",
	"OpmBcMwBR0uT5RJfmxsWr3wFwubBKJML4B2UiQzH8RLJBREoAUyFwn6JFvge6uvYlvIzxgMSRUD3I30B",
	"ZgXtM6GcPg46H4NjgSKmBalYQCFAKSf3JIY5iG+zIx6wQBFQAhEKlghncsE4EXY/GPrrbCsKcSbMIIV/",
	"beCUSnYHNF8hofP6GkXIUtAaC1N0fnlRbDRNJrXL6J9L2kwphRCEwHxZoQ5iVL+irWgEHKUxljPGk20l",
	"gFAJnOL4Cvg98P9S9NlPFoQGZCntFgercSRDhlBhjEnydfl9TlFG4UsKobJKehhiYZhxDlGd0bg2UnJM",
	"BQEq7TuYRlOqRoosDAEixRelaSRf9tDFzEAimqE6pY8FdFAaAxZKIFLGJSISYaGmIUJkW+9gyuSPLKPR",
	"fkyjTN7OFJgVHKuYAYhKRVovDnxdDn6iOIhBCdGM0AiV6n1bCmbU7t7fYE8qKi9HiFujP1aZoUwulBY0",
	"0Kzx/cqy70Ih10FmDXZjKv8NvqRKazmoahzu9vxWAxjP+AWiof7Zid/1+12/f+37E/1fEQ2d4dNwfHzi",
	"d4e+CmKiIe6eRdjvnoxPTqPZ0A+js6iMhua9YW9B5osEkh7u+36vP+/1/XlQC0jS7EeckHjpTbwLKiFG",
	"/w2MossYS0KzBJ32x/41+svV3TLGd/BXr6PeEN5k2LHhwsDvePM0U7BiNichjt+wTBFh0PESSBhfepPx",
	"sOMlLIJYTyIkoaFE7y8GI1+FT4ulqLzWV4ELjbTEnb9/q3DNwRwPtogedmHm+vjCDtpeVEiC5/BicfOg",
	"Oxhc9wcTfzjpHxeSgsfD2dlgfNY9HoPfHR73B93gNOp3R4Po7Dgajc+Ck0rcnAXZYOAPuypQHPXG3Xma",
	"dUeDUe901PNH3ZMQomF/NKzKjWV5xMk9KFYVoz3LahVdeud9X7H47/afge97NxX+/vL54u3FuQLLTM6d",
	"RWAxoiyIVRAbESE5MyhSmXkdb5aLawQBwconu1Nhn5KtmNDsi4p8MSdYkdea61owPBj2fLMU8hu8Iz94",
	"k77f8QSbyQfM4bMZp9EpA1AbQ496Y/XiPeEyw7HNLqhn+Q/bZTd3EKL1EmrGIF3Zxhx0yIglUYbEBgVE",
	"VF2pQi87Kx44aoe/jmS6ToCkwKUtA1YF9kC63iZlrpRnGeXxhELwfT5XXpA0BZ1fSyRuOp5cprrQHCgY",
	"7dy/qSR9JyvNrfwhFiZci1qdLO94REIidim6FKhgzvHSmTY8r5caN8ii56kqlDIWo0qpspFfR3aG6pAp",
	"TTIhEY4FU04uaGcqQoTWOk9mgGXGQTg426yEutJAdpDt4FBEzXNfym3DccweyoaSWLsdC2wwSPAX9aqa",
	"2FJOBSrzog2gwu8GJi62u7O8LZydlVEcfS87uLQtWyUFr9RLK3eJBboR1a7s9M9SLTfDjYJynYjtTK9L",
	"hnR2hrkboiRTIbPul2IUEDGxiFoPmRGIplTnRpZCQmKSjqYxQQ9W4feSZRUBE5KrvfdUzSSvaS6RDBUp",
	"7Bp2hDqBFvbVBfOnDAoi2oE9hK6VNRILlsW68ykC5UtEaMZZYiwZytnonLGRyt62f6D2dlN+ChKVC2tO",
	"uJFIVWdZrfZWar22VDU6NrZaclUFP3W8GAdgCIejiCiUcHxZm6yJraE9usdxBk6W1F/4R02B38HSvInM",
	"xFpHpmm8RIwiyiIotlUFdEnaSpli3aLtME3vovzwuBaxvNursZqGRGhIJRpbc3+tMX7O+m1unddLoKIj",
	"oRcGUH8Dq73CN1qlE0GF2VkaYQnfyFv65kZkSz7vwdnnXa960956r2vfrmd0yO5XtKb5NcFfftZ/eJPx",
	"sZbn/M++QyNV9cFmbqd9oy2/eXV0HZPuWZwl4NUKp81Zf9RP0MVbvZr16POVDugvhdNpETZFQqwrhiTU",
	"BRUV4FolZ9Nf1u/Ms/PKmnSVSYDS3jj80ZbUb52ma6H/DihwEto0cwJC4Dl0WgErw5lcDNq8WAH1HCl5",
	"AQvVmiv4kmIaGfHVRPj79fWlHRKyCHpIlwWEjpgDLEyWWw38cK5mzz2u0JZJgswE1wYuWLlW+HECEvNl",
	"XrRVwA1Xzi8vBNLVrjwEYAJKTw4FSzuXWinQLFHqp11traZyb8OYAFW/NtOyGRVZmjIuQb1rck63moWd",
	"Aqau0Si9Vq9mSEhSxjEn8fI2o/gekxibNEz+YjFr/sOcYyobs+rf8imrufdKDTMBuWDRrXqqI6UW6glE",
	"BOdAygrcjWOXOBLRTcn4DDxQNLeShszTIC9eaQjPOwGrqz43++2SUmf/rJyjz8pPcom30cpKaxmlpV0p",
	"41Z1kFymduPr2p0SvKKUodS7TQyFmJrzFDSCL2VQrCydkn692bCUwNWU//ur3z077/4Td3+7+cvfJuVf",
	"3dvezaPfGfefKiP++rc/udzCLQhRbdtZEywqpzWOP8x0hvTAzkQjKn1sqJ5mY9GzZx/KNv16q0cAMaNz",
	"5Qc/L3iNSdvSdrMdmZ8Px1+Cwhsyt03zSlPWunMbh6B0OdXeRG55py3ki9aI3NW0G1yb5zhWdqNcBQcc",
	"CdNhpLxyR8phrQa8rlKk8siWg1lqIsB4iXA2TxSLNRF1gkJbuITpjDKV8EU6o7882DqQtDh1ovJG8Fwc",
	"cBqJ5z/r6q4r4NuR45eOjsAVgluM016DzgVVa72lO5DRO8oeaKPfsPqnNqERNB4bm3Wzn1rmX0tFGO/1",
	"Yzuue2zJuumFM6UwF3ElSaCuB0z3SwwSdNJzxniCpTfxVLzaVcNdUp06eXlgm+MQGIdiag5xaKjOlhpG",
	"K5VtWwoEJPfugFJAgqkkYZHlqzsT99Np9J/Taa/yz74OwwqBeUkHYY1U2mOnPyzdIqk7oB4WrDieWhVP",
	"p06tV3w3F3M7weZiTlbY1oySf2cV4CZsbcfZLNKhzLMrN9mhDVaeQ3xm5bi+bgt+03U39hjRQUqV5Bts",
	"sWvTtmi3FxE1x9v63P/KRHGuWVnwiNE/y7xlbkoxXdZtgRqzABzLhQ0mTdip3P4ZkSZFrkN9GmEdDk5p",
	"gYFZd29Kvf1iEoldlTqKMA+I5CrOlXhu20tpVGaF6zvCnYE9z+UqB+GuKbjDIMV7k0m2hROJ5xsncA3M",
	"m71Jo32GNak+5aVsnNvbkiuOpN8O3S4u7M2Tr5K7XWnpN8rg7rDenXO8u861BX0DzEGh4khS/mMBNnEE",
	"9vVcx2AUQURCrU4rWUuLf8BYDJhqI1L2eDlQ4qDLhQl6c/kJmeaaanyAoDfvId3SU2ZrebggEkKZ8RVm",
	"K13l8pbF8jeXn4Qr4dgpMq3tt3HCMqr3F6QLSIDjGKnRiFD07gc3NNupdDBpmqeZEaWyMW09qmaURpH8",
	"sEHJXxOvAG7JcSDBXFueKBrcdlJbmymdfXXXPM3em07C9jreXX6qCWrved9yw9me0/bNmV+IhsXiD0BF",
	"t4pSC6nlu9u6qt7l6RJ9O6Ky199dfhKoyCcjLJAAoHnq8cOVe+eu2l6a2s9tqqLjdI2cOAWk0Y/qjNvt",
	"kOYK/xJiHom/lit1I5b3Px5WMj4bqE1tYifLyVHRK/WFduqM3VvflBg5Sah4YFCrJjlsQ2hHd/7e7Lt7",
	"dROJ04fVT/5obo5e1NfxcvRU72wLsJO3pjEYkRkiVEgcx+BoNMu7h58BYpMJnfy4iRWcQlGtih8hfhn1",
	"+7M9DfJt9rEl2mF4+OHKuT8Uk7DUWUnTX1YZ4Wh1K9q217mXapQJF7VH+YC5XB4FKuB1MzDv/D4gdZl4",
	"a4A+lW3kBwVv3eynsif9oOB/MkCfKh3u6yhuBxl6RyDuJEuPDLDtevhsU3web7ekQ08wNZ31U+/5WNwS",
	"p2BCwewSh8OI94o4bKUBOHSsUOjJ4ojDYUF/uKodZGgu9L3tUNYhkhpVntI0zaWanabXcp0n5ToccbCF",
	"tIA7Tlgcmm6f6/Cb8pkTtIWI5uJhRPNza4nNuB9LpOap9PhU2aVzAFXfqXoIpVPJKHQ8TJcHcqbWho9b",
	"nj55iQDJeHz7RkeFmXAsVisqEmS1aw1zFnAW3iltZs8q7U3zwqC41LzJ1LBZSx2LvLe6bAiJYKZbxPSZ",
	"ahzeKQmyeeIq+hAtsNRFRH2y6gD4/1SYwSb+xgZoCa/iYI5w7T2zS2OtanM+lKdvqmKtNugLvV9TDoUj",
	"nDu0xb+OPvdStdieQlc3kH7StmLm/pbm+LeFEdg4E6UBtdWdsggQZpzI5ZWik22M0b169dO3bSw+GGFl",
	"NDdFIm+zCwBzferhDnRnYgWMLufE7CFvgdc9cPrJGxZB68dPPPYm3kLKVEyOjkxXiFz2arzsMT4/Migf",
	"3Q+Oau+rMClkqV6W0iUKox1g6vdqDZT6kTnCR+iMrTosUfSkXgG/JyHoPhB7FYJAwvyYK9pY0aVdPYrJ",
	"DFC4DGOYUnOgJAG6sgkZqYnVLETk2Zt4qRU40/2QswZDpjTHolNo9PKyhjwuQwqMbvSfg0QYCZDmlJQt",
	"2CmylE1pUxqAufQ3v3oCB0JyHEoXSSoFtrycai7P0WutvDGl5SrtNRgC6dNhBs2l7Ql9/zOyp3I1XlO6",
	"ABxZR5nIGOpt7xXO1A6X+r1Bz9fenlEO3sQ77vm9Y1MHX2gBPsIpObrvH1XbocTRY/0i3Kf8oF2y8jDf",
	"RZLGYDp1mkeHKhzPGdVDtctORU4pfQdHKS0rJETF3pxl80VN0jooS+ccR/p/JUN5U0ZvSpuTKYJzmAEH",
	"Gur+ckMyiFDlADQKMhrFYESiYrOmNNfn+XvCcYYRlfrbVFmVVBqbF2BBhBVjlmBJwik1qAOaZTQ0ZkFt",
	"aIQ+WizNTkLwxVw77bzMWp+7clxNbe4aEIKFRJdnbFeZEqY5OKK2n4loc9Hck2NzpFXpUGBYrkf13Vzv",
	"QJ6n5HP/Q1WkPtQE6k1DnBrXnQ58f5UtLMYdrbo086njDTd5f787q/Qs/YPO4rwcQ89zfNB52hcR6UmG",
	"B52kdVfKU8cbHZgt6+7TqfoFuu/G7RH8eqMbKauX9K/o0SmHHK26elyD2k6hOjRpfoK40JXr9qnum8ph",
	"vcQW3W1vrrmo8XV7vm7P7397Whspjh6LS/ZfnaA/qBN0IOnqPPuq49MPTzcdL2Wuev4bjbZAGFF4aC21",
	"oukrK6kr+UsmntXyl1bOL3PUXJ5Z/mmF5Wr1UPn6wtHqTy88tWzJYFs/79WO7GlHzg46Ses60e/YjhxW",
	"+x89Nj9z81QcBXAlvPTvov3tH9M/W9nPOttTKqgpvbaFZoxCLEJsTo8Wmavill8zs3EIzSlpiGonu+va",
	"wSC0r3544/rUz7Y7fJ87kV/VwKs7ua07+eq0vTptezltz7+1+tt02uPLHA7fJ31axGUhVhuHts+XyRdR",
	"6d/WBXw1EK8G4vfmJ26Y2fs9BZ9VPQSxuaTbcS/l4aLQPcLPlV/E20kBrf5k0qt6eQ1Dv4l6KeLPjQLP",
	"ildRjTfxlpt5v6Ax3zyvYeKrF/C7CxO/O+O9cRCyRfRRURO7Gfvdw4+GcvgOjP6rvnnVN79rt0C7reZ+",
	"8j3aDN5B5Yv1fxa1tFb926I7dBk8rw3KT6QephPB8cnV1836ulm/UUvCVzX9m6sY09Aujh7zr/Y/Ha08",
	"sl/RB/ZKiI06l4SuVNWUSXFCw85lEtjF19oWWJSfTNpJ23w0y/poF/WjXdIuemWvzzP94RTO6z49ynfK",
	"wTbcqjNOlS1jTl/tvd2qZ6VebrddmPW8+GZrfODqda/9P9lrT0//FwAA//8ZsMaOe4sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
