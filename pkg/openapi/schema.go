// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
