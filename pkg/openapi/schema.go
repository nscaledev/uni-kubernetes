// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
