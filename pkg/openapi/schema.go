// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
