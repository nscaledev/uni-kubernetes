// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
