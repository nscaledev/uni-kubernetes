// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PEvl3Hr49PB/AQAA//8d7KiC8WsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
