// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GM8SOTfuv9z/XwAAAP//ggwY/l5sAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
