// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"52KP/F8AAAD//6Lk/B54fgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
