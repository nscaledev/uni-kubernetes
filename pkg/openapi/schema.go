// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
