// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
