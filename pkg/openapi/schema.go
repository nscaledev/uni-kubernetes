// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/8lee3r6vwAAAP//27jSOAiLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
