// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+lB+EueNl/Pg7vzu/wMAAP//5tQKYCNeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
