// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfXPaOtb/Kho/O3N3Z4HwmjaZ2dmhIe3NLjZJcdpNb/p0hH0AgS15LTlgOvnuz0iy",
	"jTGGkJfe7d0nf5WAXo6OzsvvHB2p3w2H+QGjQAU3Tr8bAQ6xDwJC9ZfjRVxAeNG7TL+W37rAnZAEgjBq",
	"nBr2FFDSDlHsQw2ZERdoBAijO+wRF/WsIXIYFZhQQieIUS9GHltAiBzMATlTHGJHTlm5pTTyRxByxEI0",
	"jYMpUF5BXOBQIExdBNRFCyKmCK97yaa6V0W1kRML5DMubulxKzc6IhR5QCdiWjMqBpG0B1hMjYohyTZO",
	"16s1KkYI/45ICK5xKsIIKgZ3puBjufo/hTA2To3/OVoz7kj/yo/m0QhCCgK4hX1YM+3+vpKObmKKJ49g",
	"qa/bK9ZWEBkjUfKjy4AjygSCJeGiIttQRATycYxGcEuJH3jEIcKLkRMCFuBW0JiFCJbYDzy5U+mIhKct",
	"EJ5gQrnI/ZhMd0vFFIvCpH/4bc825ofsPgsnmJIVljv84N7nG2udKqd8c9AfQncQshk44kGSk3b7qM2G",
	"+gGE3ushgYt3zCWgjZeS4zNGRci8Sw9T+KibqB8ZFUDVRxxI5VBMPJpxuaLvRqIY8qMPArtYKOKSlbgw",
	"xpEnFIMOo3xTxj6HRICmepOTCbEokNSiZEVobZNrW6yThkWt858Zb870XC+12IR0Q641AEf+EsJESpxr",
	"nBqjeudk1ILj6gmGTrXdHL2pnrRH7eq43RyP3uDjEQYwKsYdhFwv8a5Ra76pNY2KsWDh3GPYvWTM48bp",
	"b98NHAnGHewROlHEEEr8yP8IimRunNbvK4aPnSmhitixh+9YqMhw3nSO30LTrY5P8Kja7rTc6glu4Wqn",
	"0XrTGb95224ejxTv0qFa95Wt3fx6+H7Oi9zeuaXrfcnM6EH7qiSaB4xyLc3YcSAQ4H5MvixXw3ToKeZo",
	"BEBR2k3ZyAXxPGkox5E3Jp4nv+UxdaYhoyziXly7pTcsUl4jYJ6nXE0InEWhA2oAn1EiWIiI4NI8i4gr",
	"NyIZ5IEkoybFJCdjeWoPlcLfNsVQiTdh1CZqt5r1Zqtaf1NtNexG/bTdOW13vhhFpl+G7I64wBGmCHsC",
	"QooFuZOL0fOCi7hgIZ4owyWbhkj7NMJFSEaR3K60BXZCxrl0eoC2d7OG0HvAIgqBoymZTKv4DhMPj4gn",
	"4goi1AnBByqwhzjFAZ8ywbW/ws48CqTvcwnHiVw47A7CWDs0PsUhuGhMPEA+i6jg6M8hYPdoIUVN+uL4",
	"L8rSPkL+E4n3GJ1MWUgNZd/viFRNQidDtaPGqRHROWULmld5lzmRWkfC4akQAT89OkqHqhF2ZFSMaeRj",
	"+hGwi0ceWHq2/no24ujt+dVqfonfBV96dWJ/eN/58q9/jM3hxeTLh/f1m2Ejuvnc8C6H/zBv/uV5Duku",
	"L8i79ujzMnJWdYJ//Vh3euyu33JbbtxpmXHnzvGdO3PWXZhnJyvXd8jFr1+CL/9yz0atycnFrDsxz7rL",
	"gX0VmbPrpmnPJ6Z93enPuu2BfR5fzNpv3Q9effTh+q/4s3U3mi3u0r8vf303dT9MJl98j496dXKx+uSb",
	"s4v6jaRV0m7PW/3ZeTzonfNBrxtZs4vm4PP50jxrL8zenJt2NzJ73U6/1+Xm2WLZt8+jgX3d7g/by4Ft",
	"rix/IaxhOx70zI51Vl/2Z92G1Zuv+r2ryLKv2pY95+bMiQb2ZGXan6aDYbtjzq7iwXDR6c/msdW7WI99",
	"1l6as3l7ID/PbhZW76qDe9eRaV80b+x5NLDnHStW/ToD25F9Fv3eOe/PzpvmqtuWtFmrectcfeHWsL0Y",
	"2JOlNazHVtzumL2bullfdAby+97Nst+bLPqzq5W5uq5f2eeL/qy7GPTmcb+X/5zQ1Svh0SdG+qv2W+fD",
	"+zo+e+fjz0t+ObyYWZ9vYnP2cXpB3s0vh/+wTNtZ9Wc3Hcu+4eb5JDbP2g1r1m2Z1+fyc9OcnS+s4SL/",
	"eZHMu+j3LhZ9ud+9m9an2flqcNZumLNJ3fqc60sW+c9p33SephXnPtcnS2tlRtZs3rD8bAxuztSaltvz",
	"Xjf6dp6G9ecr9f1NbK5pT/p2+caa3wfCjNt1y77mVu88suzJsm9fRJbdlbxu3SS8N3s3qayt1zGst/qz",
	"+cqyr+v93iQyV9cLy56aUh76s27dsq8a/Z7TkDJnfjaFHMeK2wur122Zw7ocq21JnelNlmbvRv6+tIiU",
	"sfOW1VwIi7RXll7Dyjprty272xicK74szNlNQ/OhG1uz60zWBvZc8k/SuDRnk2hg3zTN2SfWt1M5TfrY",
	"k1bWX33O9EfKb2vQu471525j0HtvWmqsq7q1uubWSo41b1n2lPftq2V/drUw7Zu4b08ic3bTvNrLs8Vy",
	"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",
	"/v8CAAD//5M2wcUdcQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
