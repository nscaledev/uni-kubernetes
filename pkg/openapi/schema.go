// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA///7FEjyJ5gAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
