// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
	externalRef1 "github.com/unikorn-cloud/region/pkg/openapi"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/core/main/pkg/openapi/common.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "https://raw.githubusercontent.com/unikorn-cloud/region/main/pkg/openapi/server.spec.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
