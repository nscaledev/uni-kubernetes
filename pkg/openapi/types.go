// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"time"

	externalRef0 "github.com/unikorn-cloud/core/pkg/openapi"
)

const (
	Oauth2AuthenticationScopes = "oauth2Authentication.Scopes"
)

// Defines values for Oauth2ErrorError.
const (
	AccessDenied            Oauth2ErrorError = "access_denied"
	Conflict                Oauth2ErrorError = "conflict"
	Forbidden               Oauth2ErrorError = "forbidden"
	InvalidClient           Oauth2ErrorError = "invalid_client"
	InvalidGrant            Oauth2ErrorError = "invalid_grant"
	InvalidRequest          Oauth2ErrorError = "invalid_request"
	InvalidScope            Oauth2ErrorError = "invalid_scope"
	MethodNotAllowed        Oauth2ErrorError = "method_not_allowed"
	NotFound                Oauth2ErrorError = "not_found"
	ServerError             Oauth2ErrorError = "server_error"
	TemporarilyUnavailable  Oauth2ErrorError = "temporarily_unavailable"
	UnauthorizedClient      Oauth2ErrorError = "unauthorized_client"
	UnsupportedGrantType    Oauth2ErrorError = "unsupported_grant_type"
	UnsupportedMediaType    Oauth2ErrorError = "unsupported_media_type"
	UnsupportedResponseType Oauth2ErrorError = "unsupported_response_type"
)

// ApplicationDependencies A set of applications that will be installed before this application.
type ApplicationDependencies = []ApplicationDependency

// ApplicationDependency An application dependency.
type ApplicationDependency struct {
	// Name The application name.
	Name string `json:"name"`
}

// ApplicationRead defines model for applicationRead.
type ApplicationRead struct {
	// Metadata Resource metadata valid for all reads.
	Metadata externalRef0.ResourceReadMetadata `json:"metadata"`

	// Spec An application.
	Spec ApplicationSpec `json:"spec"`
}

// ApplicationRecommends A set of recommended application that may be installed after this application.
type ApplicationRecommends = []ApplicationDependency

// ApplicationSpec An application.
type ApplicationSpec struct {
	// Documentation Documentation link for the application.
	Documentation string `json:"documentation"`

	// HumanReadableName Human readable application name.
	HumanReadableName string `json:"humanReadableName"`

	// Icon A base64 encoded SVG icon.  This should work in both light and dark themes.
	Icon []byte `json:"icon"`

	// License The license under which the application is released.
	License string `json:"license"`

	// Tags A set of tags for filtering applications.
	Tags *ApplicationTags `json:"tags,omitempty"`

	// Versions A set of application versions.
	Versions ApplicationVersions `json:"versions"`
}

// ApplicationTags A set of tags for filtering applications.
type ApplicationTags = []string

// ApplicationVersion An application version.
type ApplicationVersion struct {
	// Dependencies A set of applications that will be installed before this application.
	Dependencies *ApplicationDependencies `json:"dependencies,omitempty"`

	// Recommends A set of recommended application that may be installed after this application.
	Recommends *ApplicationRecommends `json:"recommends,omitempty"`

	// Version The application's Helm chart version.
	Version string `json:"version"`
}

// ApplicationVersions A set of application versions.
type ApplicationVersions = []ApplicationVersion

// Applications A list of appications.
type Applications = []ApplicationRead

// ClusterManagerRead A cluster manager.
type ClusterManagerRead struct {
	Metadata externalRef0.ProjectScopedResourceReadMetadata `json:"metadata"`
}

// ClusterManagerWrite A cluster manager.
type ClusterManagerWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`
}

// ClusterManagers A list of cluster managers.
type ClusterManagers = []ClusterManagerRead

// Flavor A flavor.
type Flavor struct {
	// Cpus The number of CPUs.
	Cpus int `json:"cpus"`

	// Disk The amount of ephemeral disk in GB.
	Disk int `json:"disk"`

	// Gpus The number of GPUs, if not set there are none.
	Gpus *int `json:"gpus,omitempty"`

	// Id The unique flavor ID.
	Id string `json:"id"`

	// Memory The amount of memory in GiB.
	Memory int `json:"memory"`

	// Name The flavor name.
	Name string `json:"name"`
}

// Flavors A list of flavors.
type Flavors = []Flavor

// Image An image.
type Image struct {
	// Created Time when the image was created. Images with a newer creation time should
	// be favoured over older images as they will contain updates and fewer vulnerabilities.
	Created time.Time `json:"created"`

	// Id The unique image ID.
	Id string `json:"id"`

	// Modified Time when the image was last modified.
	Modified time.Time `json:"modified"`

	// Name The image name.
	Name string `json:"name"`

	// Versions Image version metadata.
	Versions ImageVersions `json:"versions"`
}

// ImageVersions Image version metadata.
type ImageVersions struct {
	// Kubernetes The kubernetes semantic version.  This should be used directly when specifying
	// Kubernetes cluster managers and workload pools in a cluster specification.
	Kubernetes string `json:"kubernetes"`

	// NvidiaDriver The nvidia driver version.
	NvidiaDriver string `json:"nvidiaDriver"`
}

// Images A list of images that are compatible with this platform.
type Images = []Image

// KubernetesClusterAutoscaling A Kubernetes cluster workload pool autoscaling configuration. Cluster autoscaling
// must also be enabled in the cluster features.
type KubernetesClusterAutoscaling struct {
	// MinimumReplicas The minimum number of replicas to allow. Must be less than the maximum.
	MinimumReplicas int `json:"minimumReplicas"`
}

// KubernetesClusterRead Kubernetes cluster read.
type KubernetesClusterRead struct {
	Metadata externalRef0.ProjectScopedResourceReadMetadata `json:"metadata"`

	// Spec Kubernetes cluster creation parameters.
	Spec KubernetesClusterSpec `json:"spec"`
}

// KubernetesClusterSpec Kubernetes cluster creation parameters.
type KubernetesClusterSpec struct {
	// ClusterManager The name of the cluster manager to use, if one is not specified
	// the system will create one for you.
	ClusterManager *string `json:"clusterManager,omitempty"`

	// Region The region to provision the cluster in.
	Region string `json:"region"`

	// Version The Kuebernetes version.  This should be derived from image metadata.
	Version string `json:"version"`

	// WorkloadPools A list of Kubernetes cluster workload pools.
	WorkloadPools KubernetesClusterWorkloadPools `json:"workloadPools"`
}

// KubernetesClusterWorkloadPool A Kuberntes cluster workload pool.
type KubernetesClusterWorkloadPool struct {
	// Autoscaling A Kubernetes cluster workload pool autoscaling configuration. Cluster autoscaling
	// must also be enabled in the cluster features.
	Autoscaling *KubernetesClusterAutoscaling `json:"autoscaling,omitempty"`

	// Labels Workload pool key value labels to apply on node creation.
	Labels *map[string]string `json:"labels,omitempty"`

	// Machine A Kubernetes cluster machine.
	Machine MachinePool `json:"machine"`

	// Name Workload pool name.
	Name string `json:"name"`
}

// KubernetesClusterWorkloadPools A list of Kubernetes cluster workload pools.
type KubernetesClusterWorkloadPools = []KubernetesClusterWorkloadPool

// KubernetesClusterWrite Kubernetes cluster create or update.
type KubernetesClusterWrite struct {
	// Metadata Resource metadata valid for all API resource reads and writes.
	Metadata externalRef0.ResourceWriteMetadata `json:"metadata"`

	// Spec Kubernetes cluster creation parameters.
	Spec KubernetesClusterSpec `json:"spec"`
}

// KubernetesClusters A list of Kubernetes clusters.
type KubernetesClusters = []KubernetesClusterRead

// KubernetesNameParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type KubernetesNameParameter = string

// MachinePool A Kubernetes cluster machine.
type MachinePool struct {
	// Disk A volume.
	Disk *Volume `json:"disk,omitempty"`

	// FlavorName Flavor name.
	FlavorName *string `json:"flavorName,omitempty"`

	// Replicas Number of machines for a statically sized pool or the maximum for an auto-scaled pool.
	Replicas *int `json:"replicas,omitempty"`
}

// Oauth2Error Generic error message.
type Oauth2Error struct {
	// Error A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
	Error Oauth2ErrorError `json:"error"`

	// ErrorDescription Verbose message describing the error.
	ErrorDescription string `json:"error_description"`
}

// Oauth2ErrorError A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
type Oauth2ErrorError string

// RegionRead A region.
type RegionRead struct {
	// Metadata Resource metadata valid for all reads.
	Metadata externalRef0.ResourceReadMetadata `json:"metadata"`
}

// Regions A list of regions.
type Regions = []RegionRead

// Volume A volume.
type Volume struct {
	// Size Disk size in GiB.
	Size int `json:"size"`
}

// ClusterIDParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type ClusterIDParameter = KubernetesNameParameter

// ClusterManagerIDParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type ClusterManagerIDParameter = KubernetesNameParameter

// OrganizationIDParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type OrganizationIDParameter = KubernetesNameParameter

// ProjectIDParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type ProjectIDParameter = KubernetesNameParameter

// RegionIDParameter A Kubernetes name. Must be a valid DNS containing only lower case characters, numbers or hyphens, start and end with a character or number, and be at most 63 characters in length.
type RegionIDParameter = KubernetesNameParameter

// ApplicationResponse A list of appications.
type ApplicationResponse = Applications

// BadRequestResponse Generic error message.
type BadRequestResponse = Oauth2Error

// ClusterManagersResponse A list of cluster managers.
type ClusterManagersResponse = ClusterManagers

// ConflictResponse Generic error message.
type ConflictResponse = Oauth2Error

// FlavorsResponse A list of flavors.
type FlavorsResponse = Flavors

// ForbiddenResponse Generic error message.
type ForbiddenResponse = Oauth2Error

// ImagesResponse A list of images that are compatible with this platform.
type ImagesResponse = Images

// InternalServerErrorResponse Generic error message.
type InternalServerErrorResponse = Oauth2Error

// KubernetesClustersResponse A list of Kubernetes clusters.
type KubernetesClustersResponse = KubernetesClusters

// NotFoundResponse Generic error message.
type NotFoundResponse = Oauth2Error

// RegionsResponse A list of regions.
type RegionsResponse = Regions

// UnauthorizedResponse Generic error message.
type UnauthorizedResponse = Oauth2Error

// CreateControlPlaneRequest A cluster manager.
type CreateControlPlaneRequest = ClusterManagerWrite

// CreateKubernetesClusterRequest Kubernetes cluster create or update.
type CreateKubernetesClusterRequest = KubernetesClusterWrite

// PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustermanagersJSONRequestBody defines body for PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustermanagers for application/json ContentType.
type PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustermanagersJSONRequestBody = ClusterManagerWrite

// PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustermanagersClusterManagerIDJSONRequestBody defines body for PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustermanagersClusterManagerID for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustermanagersClusterManagerIDJSONRequestBody = ClusterManagerWrite

// PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustersJSONRequestBody defines body for PostApiV1OrganizationsOrganizationIDProjectsProjectIDClusters for application/json ContentType.
type PostApiV1OrganizationsOrganizationIDProjectsProjectIDClustersJSONRequestBody = KubernetesClusterWrite

// PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDJSONRequestBody defines body for PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterID for application/json ContentType.
type PutApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDJSONRequestBody = KubernetesClusterWrite
