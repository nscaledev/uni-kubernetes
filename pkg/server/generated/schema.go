// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
