// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
