// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"j/xfAAAA//8EUVbk+YkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
