// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPiONL/v6Ly91u1z1NHCK+zM6m6H9iQmc0tNpkJmbnMsjUlbAECW/JJMmCm8r8/",
	"pRcb2xhikuze7W1+A1svrVar9elWt/zdcmkQUoKI4NbFdyuEDAZIIKb+uX7EBWI2JHCGmAMDdJO8l689",
	"xF2GQ4EpsS6s0RwBUwEEugYgMEA1gKdAlLz0KOKAUAHQBnNRk2UIwAIEMAYTNCY4CH3sYuHHwGUICuTV",
	"wJQygDYwCH0EYNoi5kkJAGcQEy4yL013YyLmUBQ6rQM74gJMZGMr6GMP9J1b4FIiICaYzAAlfgx8ukYM",
	"uJAj4M4hg67kT21MSBRMEOOAMjCPwzkivAa4gEwASDyAiAfWWMwlKUktWVTXqqkysmMBAsrFmLxpZ1oH",
	"mAAfkZmY162ahSV/QyjmVs2SLLUuSqbGqlkM/SvCDHnWhWARqlncnaMAyqn6/wxNrQvr/53vpvtcv+Xn",
	"y2iCGEEC8fwMPzzUkm5OmHpJ35+erb8bPymbQYK3UDKuAlOzxTVny8kuNvu70B4yukCuqEC2KXmM4kxj",
	"vwuxDM2qsVgXPEbqrqnfgdIH3STi4ifqYaTVrtJll5QIRv0bHxL0SRdRLykRiKifMJQKUk36+YLLEX23",
	"jHKUPw35HprCyBfWQ1Vi86rlNkSupjPPO0MeCCV9wIwB7PaP+h6zpDpRI/sl5cal7uo5wzPUWsmUWxdW",
	"tDxDkIuzplWzVohx/XTVrLd+rLesmrWmbOlT6N1Q6nPr4tfvFowE5S70MZnJpgNMcBAFn5AigFsXjYea",
	"FUB3jonqeurDFdVK4sKa1Tv1OZ7NAxTUYbPRqDdn9WZjNlEUJQ20H2p78/Hbw+niYxh2aFJ2nE318Ukz",
	"c6NX5XPmI4jPzNquLnGmwqFRGaqqDUUtKB5SwvVigq6LQoG8T+bhIS2gm55DDiYIEZBUU/vJGvu+3FSm",
	"kT/Fvi+f8pi4c0YJjbgf18fknkYKuITU9xXaYYjTiLlINRBQggVlAAsutzIRcYVkJCt8JMmoS2ZlGJyl",
	"tuoU/Pp9n28r7CEOIAHQF4gRKPBKkqZbQR7ggjI4UxpbFmVAgyTMBcOTSMpRUgK6jHIuURQC+2JWB+A9",
	"giJiiAO5GM7gCmIfTrAv4hrAxGUoQERAH3ACQz6nguudGrrLKJS7voc5NALr0hVisd7K+Rwy5IEp9hEI",
	"aEQEB//DEPTO1wwLJMFd/L9SCjzqRqoHM/a5ECG/OD/3KZnNKSN1TM+tmjWPAkg+IejBiY/MAh6YIlL7",
	"u5pxPzutr/FP4dd+A48+vO9+/ec/pvbt9ezrh/eN+9tmdP+l6d/c/sO+/6fvu7i3ucY/dSZfNpG7bWD4",
	"86eG26erQdtre3G3bcfdlRu4K3vRW9uX77Ze4OLrn7+GX//pXU7as3fXi97MvuxthqOPkb24a9mj5cwe",
	"3XUHi15nOLqKrxedt94HvzH5cPc3+MVZTRbrVfL/5uef5t6H2exr4PNJv4Gvt58De3HduJe0StpHy/Zg",
	"cRUP+1d82O9FzuK6NfxytbEvO2u7v+T2qBfZ/V530O9x+3K9GYyuouHorjO47WyGI3vrBGvh3HbiYd/u",
	"OpeNzWDRazr95XbQ/xg5o48dZ7Tk9sKNhqPZ1h59ng9vO1178TEe3q67g8UydvrXu7YvOxt7sewM5e/F",
	"/drpf+zC/l1kj65b96NlNBwtu06s6nWHI1fWWQ/6V3ywuGrZ215H0uZsl217+5U7t531cDTbOLeN2Ik7",
	"Xbt/37Ab6+5QPu/fbwb92Xqw+Li1t3eNj6Or9WDRWw/7y3jQz/42dPVLePSZ4sG289b98L4BL38K4JcN",
	"v7m9Xjhf7mN78Wl+jX9a3tz+w7FH7nawuO86o3tuX81i+7LTdBa9tn13JX+37MXV2rldZ3+vTb/rQf96",
	"PZDz3b9vf15cbYeXnaa9mDWcL5m6eJ39ndRN+mk5ceZ3Y7ZxtnbkLJZNJ0jb4PZCjWmz3+9dczDK0rD7",
	"/VE9v4/tHe2mbo/nxvw+FHbcaTijO+70ryJnNNsMRteRM+pJXrfvDe/t/n0ia7tx3Dbag8Vy64zuGoP+",
	"LLK3d2tnNLelPAwWvYYz+tgc9N2mlDn7iy1kO07cWTv9Xtu+bci2Oo5cM/3Zxu7fy/cbB0sZu2o7rbVw",
	"cGfr6DFsnctOxxn1msMrxZe1vbhvaj70Ymdxl8racLSU/JM0buzFLBqO7lv24jMdjBI5NXVGs3ZaX/1O",
	"14+U3/awfxfr373msP/edlRbHxvO9o47W9nWsu2M5nww+rgZLD6u7dF9PBjNIntx3/p4lGfrzfC207L7",
	"bnN4u25KmRn23/OU56Msz6+2ibzr34m8S7rcjrO9UnMldYw9es/t246kT7ar9cNiuR1l1oYj5ah/3XUW",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
