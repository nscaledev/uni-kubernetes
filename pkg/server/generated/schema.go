// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PiONb/V1H5/6+a56klhGtPd6r2BRPSPdnBJt0h3ZseprqELUBgS15JBkxXvvtT",
	"utjYxhCTZGZ3dvIuwZZ0dHR09Ds3+bvl0iCkBBHBrYvvVggZDJBATP3n+hEXiNmQwBliDgzQTfJcPvYQ",
	"dxkOBabEurBGcwRMAxDoFoDAANUAngJR8tCjiANCBUAbzEVNvkMAFiCAMZigMcFB6GMXCz8GLkNQIK8G",
	"ppQBtIFB6CMA0x4xT94AcAYx4SLz0Aw3JmIORWHQOrAjLsBEdraCPvZA37kFLiUCYoLJDFDix8Cna8SA",
	"CzkC7hwy6Er+1MaERMEEMQ4oA/M4nCPCa4ALyASAxAOIeGCNxVySkrSSr+pWNfWOHFiAgHIxJm/amd4B",
	"JsBHZCbmdatmYcnfEIq5VbMkS62LkqWxahZD/4owQ551IViEahZ35yiAcqn+P0NT68L6f+e75T7XT/n5",
	"MpogRpBAPL/CDw+1ZJgTll7S96dn6+/GT8pmkOAtlIyrwNTs65qz5WQXu/1daA8ZXSBXVCDbvHmM4kxn",
	"vwuxDM2qsVi/eIzUXVe/A6UPukvExU/Uw0irXaXLLikRjPo3PiTok35FPaREIKL+hKFUkGrRzxdczui7",
	"ZZSj/NOQ76EpjHxhPVQlNq9abkPkajrzvDPkgVDSB8wcwO78qO8xS6oTNbNfUm5c6qGeMz1DrZUsuXVh",
	"RcszBLk4a1o1a4UY17+umvXWj/WWVbPWlC19Cr0bSn1uXfz63YKRoNyFPiYz2XWACQ6i4BNSBHDrovFQ",
	"swLozjFRQ099uKJaSVxYs3qnPsezeYCCOmw2GvXmrN5szCaKoqSD9kNtbz1+ezhdfAzDDi3KjrOpPj5p",
	"ZW70rnzOegTxmdnb1SXONDg0K0NVtamoDcVDSrjeTNB1USiQ98n8eEgL6K7nkIMJQgQkzdR5ssa+Lw+V",
	"aeRPse/LX3lM3DmjhEbcj+tjck8jBVxC6vsK7TDEacRcpDoIKMGCMoAFl0eZiLhCMpIVPpJk1CWzMgzO",
	"Ult1CX79vs+3FfYQB5AA6AvECBR4JUnTvSAPcEEZnCmNLV9lQIMkzAXDk0jKUfIGdBnlXKIoBPbFrA7A",
	"ewRFxBAHcjOcwRXEPpxgX8Q1gInLUICIgD7gBIZ8TgXXJzV0l1EoT30Pc2gE1qUrxGJ9lPM5ZMgDU+wj",
	"ENCICA7+hyHona8ZFkiCu/h/pRR41I3UCGbucyFCfnF+7lMym1NG6pieWzVrHgWQfELQgxMfmQ08MK9I",
	"7e9qxv3stL7GP4Vf+w08+vC++/Wf/5jat9ezrx/eN+5vm9H9l6Z/c/sP+/6fvu/i3uYa/9SZfNlE7raB",
	"4c+fGm6frgZtr+3F3bYdd1du4K7sRW9tX77beoGLr3/+Gn79p3c5ac/eXS96M/uytxmOPkb24q5lj5Yz",
	"e3TXHSx6neHoKr5edN56H/zG5MPd3+AXZzVZrFfJ/zc//zT3PsxmXwOfT/oNfL39HNiL68a9pFXSPlq2",
	"B4ureNi/4sN+L3IW163hl6uNfdlZ2/0lt0e9yO73uoN+j9uX681gdBUNR3edwW1nMxzZWydYC+e2Ew/7",
	"dte5bGwGi17T6S+3g/7HyBl97DijJbcXbjQczbb26PN8eNvp2ouP8fB23R0slrHTv971fdnZ2ItlZyj/",
	"Xtyvnf7HLuzfRfbounU/WkbD0bLrxKpddzhyZZv1oH/FB4urlr3tdSRtznbZtrdfuXPbWQ9Hs41z24id",
	"uNO1+/cNu7HuDuXv/fvNoD9bDxYft/b2rvFxdLUeLHrrYX8ZD/rZvw1d/RIefaZ4sO28dT+8b8DLnwL4",
	"ZcNvbq8Xzpf72F58ml/jn5Y3t/9w7JG7HSzuu87onttXs9i+7DSdRa9t313Jv1v24mrt3K6zf6/NuOtB",
	"/3o9kOvdv29/Xlxth5edpr2YNZwvmbZ4nf07aZuM03LizN+N2cbZ2pGzWDadIO2D2ws1p83+uHfNwShL",
	"w+7vj+r3+9je0W7a9nhuzu9DYcedhjO6407/KnJGs81gdB05o57kdfve8N7u3yeytpvHbaM9WCy3zuiu",
	"MejPInt7t3ZGc1vKw2DRazijj81B321KmbO/2EL248SdtdPvte3bhuyr48g9059t7P69fL5xsJSxq7bT",
	"WgsHd7aOnsPWuex0nFGvObxSfFnbi/um5kMvdhZ3qawNR0vJP0njxl7MouHovmUvPtPBKJFT02Y0a6ft",
	"1d/p/pHy2x7272L9d6857L+3HdXXx4azvePOVva1bDujOR+MPm4Gi49re3QfD0azyF7ctz4e5dl6M7zt",
	"tOy+2xzerptSZob99zzl+SjL86ttIu/670TeJV1ux9leqbWSOsYevef2bUfSJ/vV+mGx3I4ye8ORctS/",
	"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",
	"ArXpB/sujZzLPfJ/AQAA//+4xO4+d4wAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
