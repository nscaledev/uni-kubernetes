// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OJdz5H8DAAD//4kIDK2efgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
