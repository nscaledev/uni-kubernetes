// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
