// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ggAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
