// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/+TxycmlswAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
