// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3MaubL4V1HN71e199YBDBjn4ar7BzFOlrMGOzFO1jmktsSMAMGMNFfSGI9T+e63",
	"9Jo3MNje1zku/4NBarVare5Wq7v13XFpEFKCiODO6XcnhAwGSCCm/nP9iAvExjBAV/YH+b2HuMtwKDAl",
	"zqkzWSJgWgICA9QCo4gLMEMAgjvoYw8MxtfApURATDBZAEr8GPh0gxhwIUfAXUIGXTloY0pIFMwQ44Ay",
	"sIzDJSK8AbiATABIPICIBzZYLAFMe8mmuldDtZEDCxBQLqbk1XEGOsAE+IgsxLLlNBwscQ+hWDoNR6Lt",
	"nGbn6zQchv43wgx5zqlgEWo43F2iAMr5/3+G5s6p8/+OUuId6V/50TqaIUaQQDxPth8/Go6kAaP+lQ8J",
	"qkNU3RyEsr0ibQPgORClnzyKOCBUAHSPuWjIFgRgAQIYgxmaEhyEPnax8GPgMgQF8hpgThlA9zAIfblO",
	"dv0wty0AXEBMuJA/ZgebErGEojDk33jJC0vyu6x7yOgKuaLGkpuWeh9VY5wB9rsgy9ACU1IDV91wF6op",
	"qN8B0x8aJOLiHfUw0gJL8e5ZZk0/6SbqR0oEIuojDOWGgHIyRysuZ/TdMZuh8PO7iHj6yzzDNNVmaHZa",
	"7VbbaTh3iHFNmU6r02o7PxIaeGgOI1/Ib+rNOMuRepp50p/ltr4hAUgFd6tEayl5FGF+SYh5pvf7s1Mn",
	"Xa6mESmVJGprEuWmevrdmfvwjmrxe+osWt0WF5B4kHmSvQK4QOYn5K6b3eP2606v2Zuh+Rs466hJK7y4",
	"c3qcHe2u0+q+bnXleHMERcQ0q8BIUO5CH5NFQqW8GpB8jMSGsrXif6I4kCN2p7Tjv5w3LfXnNNSnXqvn",
	"fGs4hHroiqE5vpcTfdttdV69kdM96rxyGk5IvfTHdkv9HUkIEix2Mz1fy566o0KdhohwAd21XqsgjATq",
	"30Hswxn2sYi/UklCh9A76DQcdC8QI9Afa/yHAzmrt17nuD1zm8ftjtfsnbjt5tvj7psmfPX2VQ/OX52c",
	"vH4rl4n6UbAV9I+GIwH6FHpXlPqSDgVSfncCeI+DKPiUXY4Ak/x37R8NJ4DuEuuV9zBXM+P4ATmnJ/LX",
	"AjP0Wku8WAYoaMFOu93qLFqd9mL2TIxR3Kvffhwun8yWqtqy6b5LFO1B+/ZKi/xH7VYztSBuGsVRXxIl",
	"HcozMhjVm4aS1DykhJut57ooFMj7ZL7cpl406CXkYIYQAbab0vgb7PtS7c8jf459X37LY+IuGSU04n7c",
	"mpJbGikLKKS+r4wmhjiNmIsUgIASLCgDWHBpbIiIK5NIksFHEo2WJFRJ1mVxrrsI/zpUPB5L8fit7jKV",
	"cORVK9YHPuYC0DnItAcz3aE410fOssQjd9hDHEACoK8EksB3chk0FOQBLiiDC2X2yKYMaNsSc8HwLJL7",
	"xbaALqOcS+MTgfJ2agHw3sh2IMVEE1r5JeIGwMRlKEBEQB9wAkO+pIJruxG66yiUNqiHOTQb06V3iMXa",
	"sORLyJAH5thHIKARERz8F0PQO9owLBAIIIn/W3K8R91IjWDmvhQi5KdHRz4liyVlpIXpkdNwllEAyScE",
	"PTjzrcy6ME2kKHM14X4ed7/G78KvgzaefHh/8vXXf85H18PF1w/v27fXnej2S8e/uv7n6PZX33dx/36I",
	"3/VmX+4j96GN4c+f2u6A3l0ce8defHI8ik/u3MC9G636m9HZ2wcvcPHw56/h11+9s9nx4u1w1V+Mzvr3",
	"l5OP0Wh10x1N1ovR5ObkYtXvXU7O4+Gq98b74LdnH27+Ab+M72arzZ39/+rnd0vvw2LxNfD5bNDGw4fP",
	"wWg1bN9KXCXuk/Xxxeo8vhyc88tBPxqvht3LL+f3o7PeZjRY89GkH40G/ZOLQZ+Pzjb3F5Pz6HJy07u4",
	"7t1fTkYP42Ajxte9+HIwOhmfte8vVv3OeLB+uBh8jMaTj73xZM1HKze6nCweRpPPy8vr3slo9TG+vN6c",
	"XKzW8XgwTGGf9e5Hq3XvUn5e3W7Gg48ncHATjSbD7u1kHV1O1ifjWPU7uZy4ss/mYnDOL1bn3dFDvydx",
	"Gz+sj0cPX/n4ure5nCzux9fteBz3TkaD2/aovTm5lN8Pbu8vBovNxerjw+jhpv1xcr65WPU3l4N1fDHI",
	"fjZ4DSpo9Jnii4feG/fD+zY8exfAL/f86nq4Gn+5jUerT8shfre+uv7neDRxHy5WtyfjyS0fnS/i0Vmv",
	"M171j0c35/Jzd7Q634yvN9nPGzPu5mIw3FzI9R7cHn9enT9cnvU6o9WiPf6S6Ys32c+2rx2nO44zn9uL",
	"+/HDKBqv1p1xkMDgo5Wa03153JvOxSSLQ/r5o/r+Nh6luJu+fZ6b8/tQjOJeezy54ePBeTSeLO4vJsNo",
	"POlLWh/fGtqPBreW19J5XLePL1brh/Hkpn0xWESjh5vNeLIcSX64WPXb48nHzsXA7UieG30ZCQlnHPc2",
	"40H/eHTdlrB6Y7lnBov70eBW/n4/xpLHzo/H3Y0Y497DWM/hYXzW640n/c7luaLLZrS67Wg69OPx6ibh",
	"tcvJWtJP4ng/Wi2iy8ltd7T6TC8mlk9Nn8niOOmvPif7R/Lv8eXgJtaf+53LwfvRWMH62B4/3PDxg4S1",
	"Ph5Plvxi8vH+YvVxM5rcxheTRTRa3XY/7qTZ5v7yutcdDdzO5fWmI3nmcvCeJzSfZGl+/mD5XX+2/C7x",
	"cnvjh3O1VlLGjCbv+ei6J/GTcLV8WK0fJpm9MZZ8NBiejFdjPp4sovHDzcn44VaM1L4c3Y8HHzMw2gmM",
	"j/vxOR7HvXu5PmO8aY+u1ZzgEL/5x5WWl/84W/zP/zgNx8cuUjrR6YfQXaJmt9UGF+bLxIa0Er/ZaZ20",
	"Os1Oqtq1sZzV8yetjrQ1H6Pp9+l4rf98lNX2Ws3PoGcMycdo+e8OYowy59TBRHl6fjN2mjx1yF9+y6Nk",
	"rbgZ9WJgutS3QCmMxLJ7rkasmO+nLPA5xNIM1F21F0rNoQEoM+afbp24rox/akpgYiBquxXMMfI9TS6X",
	"krmP3ScSy0LZQiWY2qbK1SWR4TDQTj8AfWlyxNrVxp+RemZIixw3fjZCxRKxBoh4BH0/BmKJOQgQJFwi",
	"FoMlvEN5FFvF0zx/pAX5NM+LcSuUgPQjQW/CBYOehFc+7zUcfQJIXEiYkglWTbrt7nGz/bp53Jl02qe9",
	"k9Ne96uzA4C2eiVGyHN+1N/aOeLt3ts5d6xm0jllM+x5iDyNSxMwW9g04ogBlyEPEYGhz4FH1UZKGCLZ",
	"QCHDd9hHC8SffbNvIAceIhh5YBYD2YcyzM1W16yq3N7AhRHXjSRquYZTIugaEYs8Jos8+tylIVLnQUhA",
	"/2qYyBBFASlAyE/ptKeEIBdxDlmcmTigRHVJzjahD8WcskCtGCbaQ3Ot/Elq0k9bO+2Y+k3/W718RkIK",
	"CvTsXR/i4NnWp09ARNB9iFx5slPjA+q6EWPIyy8MzLUUDBKOERGmDyTelMiWPHJdhDxJRykfBYtbYDjX",
	"kLBaAHUTAjlqgNBHkKujJWUCYAGgOnZiziMtnEp+GnmIlIIPL2rQnboCiSYXDMFASpCK3Vnh49HgIwYT",
	"d0IJi99DTv6NfbANx0VMjCCBC8Sc0zn0OWo48vR9rf0AyXeYLBjiPPk/nfQA8uWMSoTtb+QOexhehohB",
	"QVOwIaMBEksUWSgvHuB6HuADlOXJV6eCqNXK8j/Ftfzt0b7lPYZBWQRp64BQ8Z5GxHuagiFU/DaXYLZo",
	"l4yJjbzUns1fFD+btrkh6nQjKJhj4oHUgG7l9so7n7prIzuKHM2f5svVu6H2YiYoldDYvaiXISLXsh+A",
	"mY7ggVrbLwF8Vi0TnmWajeT/q8tBs1P8ovuXIsR5XvY9lgDYqy8zDS2GyqpD4jHkKGJdlxpW0gOjqgrE",
	"eK9k3WNp4IZSTvcaRop22w1nob7qNDR93sI37qvj1+1mr/3qpNnzerD51oPt5utXr994817b9d5KgRGg",
	"gLLYOT3uJrTaKncfQTszybok0/K/QKihFPaPppMOmkl0YLfZ7U463dN277RzLHWgIhZ81Zu/7b562zx+",
	"hdrN3nGn25y98TrNk6739tg7efV29lqqnYB6eI4roHVOTjtvMho1mkXdbrvXlOrmpPWquQij5kn3pPXm",
	"pNU+ab52kdfrnPRyHqjvGUvJKKqTljRMtJE0YPhOWl5OAuaQQ2yBlnWXQ6lZru9+IEPqDg4KLOW78YZg",
	"nj89JQP9guIriNkTZVwQNzlfNtcofgzzWRzqTneNYhDKDmoq5pL16TNIbmu/HXi/uwdx20phqyN6nohs",
	"tG5ukLIFsl8hyA9B3mCyG3fTSKEeEeMCeEBPtISgK0/7v2knxDaPXiSWiAh7z6qP3s931q6Cbn0UGj1z",
	"xl9CDtB9iBnyWiq8y4xQmG75Cr5Psq7jlqM4NURMmFCrXOti58+IzShHIPOtXI6N3OEKxcwVtPGPqMAB",
	"EYeSG7hg0uD/UbpXLY4zyP4MfEzWymlTGEJClqIDCslpDFcNVHEzWxzsZ9kEMNMmNwcbA1cCq290S7QF",
	"M8jRqx5AxKUe8sD15w9ANm0BMJHCji9p5HtAqnOACZhRsQQ+Xix1RKQH2VrOMdBES6Y2iwWqQiK5uKgK",
	"szA/goh4iIHNErvL0hJhDhhSHhavcpakkl43BP9vVJNOAi74AbcfE9n8R16v1ez62XaxAYQ6UOVfehJV",
	"jJDffEWeTMlrVjuD1bdkpnRmQ28qPTcl9lC/FII1eEszh1xv5YmXXIS5lnPmtGWHbgETCgICyNbImxLI",
	"QcjQHUYby13yUDZDgCNfO+JmMTCn1EYSeEvnwMdzZONE8l2nRDlYBQXwjmIPRBk/aKTd7Vy57JA6rHkN",
	"II/zARTYTX7XgTzKTwjwfEogIGiDmJ2IIoElh77/0HYC1odKTOysWuDLEpGk8U/c4D8lagJaBvJGQioz",
	"smL7BQVQkhW5yLOYyZYLyOSsuZZdSCwRm5LSHCQuZobaZZwuB2USy7LwRMS7nF/gecXiq1moxdWTVsC9",
	"Jp035Txy+92DAjUFDlD9PTnJhkFt3Y2GpJXISSIU8MssQgptRqmPIMns0mpsDBjTpgKd6m1qYdbaYvn7",
	"nyqC8xC5yuZumKXkileTJd4SNgX6vl/kKLkvEh5R92cGiJcE70eMISL8OLP3sottd12F0oUxv5x/QWi9",
	"V+KlUx6knSQx95OLV4mkndFjDQcLFPCDI9WcFB/IGIwL6AxQiIiHiIurceKoiJKRDjY6EEsLXUUHzpDc",
	"3/ooUTANDkU9wSqui368z7wCXtK0vOjbd3IN1Vq1e/bsmU/IpUGAiLeL5sw2Ql4ODUV+c8+TUh/OhZIa",
	"fyDxJ8ai2IK/NDiUtJ5jXyBJq0KkRAa1nSsn4KLaotmO2udt8rAAOiMTi7Z3fl8cSjusr2VZbqFrAslw",
	"xz7Rnun1Ewc/Iz9QmTmivrCvKeU/Z8zA/TIiNZIewX927Xav8D4JWslmNTGoHLpS2pePSzBWtoxUQhuE",
	"1srMkwYE2GDi0Y2RniFiARaAqgszLVSp3M8hYtL2kIqsginnDHsw3jcROdoXNZjEO6Dk4D4ciogd3is6",
	"fCSxjBg/vFeEDu+0QR45uFuVMi9e5xaZMBc8Ul7EytPJwSp9nwF2EMBsX8kySEAPihr+IW2VjWz7nTax",
	"irMyOyO9Sappi5Zp8G3PyuyUD8X4npoiIp83VpYRSxqxSpUjf7Bz92AszfmbyZkc11y3Oqfd9J7VOW0n",
	"sDERaIFYZWRDeaiqCAlzf1zIHynyJD74prR/Ndx62P5LsXNxv9byOI/07fYVpX4xpOIgKtmcid9nX51l",
	"c8Irj6hpbMVBaJsbslJQxEFAEn98ReDBgaC+5HrXFhJZ7FNiFFiiiFuVZKnk/l3br381lHaRwGRRtd98",
	"n26QCVOpElXXxqTyPIa4ciuphsoRJPumHmhQSNfpXw13W9bDq7seOBsOPhWgV/JPgMlQQ+qUxR2PFH36",
	"aeKRCt7ZOhtCSdOGOoFfWyftt+C6P9aT8jw7F0k5V5JqrjKYdk8mgXIo9j9qLXI+NKZGPJrlJBBS6oNM",
	"aE0hUg3YnZtpMiVBxAWAPlemoPV3Ye2rsiNYSVRmqlLkTpUWNo1Mar8+Zur2CW+llQYW6spVpYxpJIyC",
	"yhA7o59KUUKV4+tG9cZXjsF0cI161eAFeVDEpFGiTa09/j4j9Leceaj6BvqKgSlJVie5I7HZc2URsIu3",
	"znXojWzTNI2q/X65WL4tUGSbZqAbVUPJRf9tgXJ1eT38VWfpzSBHnjyqcMwFIiLJIPwvm2j339XjJBGF",
	"2+ZLgGliLTR/G8qVwYhbwBYkpGc7tAD4pLmGJ+PK41qGqOZYZvZiNSrF2MciFkPto1FojD8PB8M+SBpX",
	"wcsGTW5bjKRJFUq1ZNs4E3VZ4O11Wa4Z1blDpRVDN7cb34PxtT4M6LaSxBHfKeeTLqaHUmFGe9XyDGUD",
	"RovQDSGMFpTYhDZkEsh+kjfKxVeUAp351F1Xu/fTGNRDxgup96jhCpGthwxpuj5i2KIRltK4iFCWHo0i",
	"p9QSxakpedCZJ40I2XX62RrpWzK3dcNydJzJa88cKvX9Xt4cMFd/lStYEUxcHH17PBoYDqrZgi9/QXH1",
	"VXsK7fr6Z/ALiiVbGHeyygfwfWBCfKv32LYY5lKggmr3/DQrsN+2RdyKaBXNa/Fi9iyy3SzcahXuNQUO",
	"O4Vn+spz9N7l+JK3UIur0gKXd4gxVVQga3bu4l0fzpA+00HPw9ogutoeySKtJ9VXCpmo+ty6C+c1inVP",
	"oAdWhmMY+jEwEjvZ/xnQ6Xpm4tYf4wmoPojnMTzgoijF52De26lk951N6ju9dvP/vjNiRYD9QVg/Ac8q",
	"Q2Bbravdp7unltwDz1l+DeyovhbA+wv1j3P6SvsT7b+dik2WjYArEeADIohh12SMBYhzuKjwZqPq3n0g",
	"kUOmt9nu6D6ExNO0UsLl58nkyjRxqYdaQOHCVYSqPmSYhpd9iakNIXBNJuIs0sGsGi4yRJT4MYwEZLGt",
	"OuMqM07qm/7VkANqAizUuZJylIYmgFlsxpIzRSQK5EYtp2FnAx1/c32MiPy2GLQYER6FIWUCyb46HPI3",
	"tQqNBKZKgzQGUya3UKAgpAwy7Me/RSRJNc90TEa1XywYJKIwqvrODpnNLskkS8uDBPV+k78at1QBSIA8",
	"DC2QNH/1W5UVUw7T3Ba3aDjKxC/ObH6ogrBfdm7PwawSo1vzISp9SjuyIA6KHCgZPE+MH9iR1bFDpO7O",
	"6agpW7cTsELGbku32EPsolFbpjX2nsMoJtvMYV4Npt6qYc/mDOxculIGSq2Vq8g/OXThimuxa910qsee",
	"5dIJHhWHqTDa4vpLXX5nVze82odoMwkrtpOqDSV7o3CJAsSgD2RrqQA/vKuGtqiBy4erG65qvhIqlFdP",
	"Kgek9AoxO74MuIoTJdhIx+Nq2mxjQJuos3uWupWaHd4yve2yxyBwKOs29OolKJr12MnRNi+oFiMnWUGH",
	"sq9hyV1cqxJiqpjWK+bBVDCtzS0qEVNFbth4UdVbVUcwHVpAp+FY800H1ibuBxX3oeN5p2SGwBze0YhJ",
	"s+ZOMp/vIWYzc6Ap/KHC6oxVCaLQgwJpp+Rcx+xGPkFMC2BciE3fGau6h2P1zLYxbJIsVZc8PuTSWNXd",
	"niOgVoPees1ZN0g9zyxb49RzO8KwRoYMe8LPtwxS9gurOdkobHs5XGbObDZZFW0y7lqOAkgEdpPwr3yy",
	"w0xV1/CAhxlyhR/rpdPWb6xuoLIHsFyMRNk1o44eaVnrnG1erXhz6W+VUlm1AJ5qUj+ELUOgwij7l6em",
	"4Dowf+5Q8aZl1y7pZjLg9ijl6+ufk9y3Q2xV2+fZTNQkYa8WdTPpeodSztJlF+2yHpx617jGJ1Nxy2Hs",
	"k1q4ac+nU6iGsN2CLWjtPaf3TOWE7SDzcnMPRLb15nacmEsVLuGMRbI1VjVD40Q0FSSTh+Se9cCc0SCj",
	"TnR5Lm524JTYuPOQISmK7KnfqEzEuEkQsfIIVAy9jxQFdmfpPbKdYJb8ueXduSsMQ+zew9pdXeElfrSn",
	"/TE+XV3KoxTdKg1u+dMOu7RAPAWoiio2mbZiR5qfKkIcniGC6pGiLcnk3SHR0jzemmIsUy+6KL10Xm3V",
	"aPqXQ8R74RmBR1LApgPvIECSDFxz/maSldMvrGAlIUxW0E88MZ8qLveUGRNWR+t+UYe9XOVqKZRcGpqs",
	"u+INlSmNBUIaRr46AlTtnnzRnqolUUeD3LjZY0Vti9lDupL2oQOpfocMtHW3VlOQIUUcTULTty7xtnH+",
	"/rXSPSvGaVSKuKTGUsW7MDp/zDqQi2HLYKiq8/m67p1pZDXT1Lkha0I3ZOqAiAjs65LaefK4lLgqo9zU",
	"zmPIR3eQiGzgCxgK/c6MgqyLuOlzJZ2SaVrZSVruTq5kuy5mKRVhxM0BDQvgLiFZ6CDCabYu1NSRytjO",
	"w6hYFYaWG1PhWRrWTN6LdIKPPbQqiFOSJY0eXo8+QGEezEZnlmq+TOqIYg5mSMINGXUR58hrTclQZz8p",
	"BLMw1eXB1AF4Xih/ly+Ul6Iap/kXrSkxdw8msSopmVfj5jm72RO2qpKgmcyCqhuTNEvEpNgxGMpTliE9",
	"QfdCR4/PkzKKlXmv+6SuClPXG4CJeo2LSl31bKjByhNVASluxLCIr12VQy8H0bdN+bIKlaarXhE7RW4v",
	"f2YIMhUttJackgOjxJhPN/Y2Xd3MqF/OqI4fz315w/xM/XisSm2KuBURvKaMNF2fRl6LsoUpEXF01z3K",
	"9ZeLLKUO15VOFUaPgKn65aK11E+6GAUmc1otmjL27LWOslEhs7bGQxrQow+rvqQLyO42JSlUxrYbuz6a",
	"Eh0bGCCy9Q5WiQc5CubApwuTdKu4Rd3SzQsLMiUWi0ZyKk6rdCamuQSjxNECCWmy27xHIyglWcw0XEiU",
	"B02JQ1tzFM64YNAVVSRJM4YFNWpVv0mh5prpMSXpLE39Uw5UIK7xi5ibytEFMGVMFF5TskTQM9GJWPgo",
	"f8jJrEyuJmS71dU1IeWZQGVdOMetdutYbmMoloqBj2CIj+462bwGkwV85G5L/EjCiUupwwk/SEwXqEKD",
	"X6iU/4VPZ9Cvyj3WgToJkfS5DfO0NEHIEJd0gcBdUjlrOk8SAFXnLPe1dFC+3uRDT900i36IP3f6pfme",
	"JeUMc4+bdNvtbVIraXe0/VmRHw2nVwdCRRVv1bWzv2tlIZwfDeekzri76tZmZauq91MtVf/1Tb2vc9/M",
	"FdJoLhiNQufUCSBWRvcuTtuZ5JZ/IOv3Y7p8mtYfynr5DJEX/vuD+I/Xk201+StXtiAt2K+DutPceUpy",
	"4UZ7eYQ/lSNeeGErL7hbw8QsH9RaexW/amEpF6HJo6FsAYkx5LYvdhKs9piF3lGC+k9c7167t79zqY7t",
	"X5hRMo6dytu10Fc2beEmC2Ss3YSTwFn+sstYiarwfGopb7GOG0AsGY0Wy5yyaZiaNOqjoMB6alpTUhxM",
	"GpsMzRFDxFXhhVqBFcp+GM2qn+9Cc0y0N3dKOJ2LDWRpZapShjNIl0xHE1bUt0rq6UyJrcgzj4iro3nl",
	"UQaATwZHc9BH9/rJ24pHdNWBv+JRXF32jHPqYuUeyjh6d0jxwk3k4Zs5xymP2dHV7268bOZn28zZhdRs",
	"4CNRdQGhvlcPD2S7KKaWEh8Lnjn65WJIczUb1bsMFcpew1dcc5lFqcQ03Rr6vvgG4wu/7OWX0r1YbpWt",
	"2INgFnH5iQPtZzFOAn0HyFNXgr2QmRIk3JZuNUM+JQvtz4QiL0KSE4Z5ARwyjrgACwYxMUNNiTxWfHrX",
	"V+UbQsorxNaZEnZcBwTlp3A4S15RLv4dGfJtLbGbfxjqD2ZIKb8Ibc6oF6fvrFqRtf1CMGN62MfGK40O",
	"88Kr1Mk8U7FOc7k3JeZq4JdsfI/q21AxKBntml6CFNnqJz4lRS2522i280pSmOspWTuZR+nXUoXmv9nh",
	"po4YCJP3fI17c5558OgnvofMiRTI0dm+zR5vn2zm+fajyqeOf7yIkr+WLWQ3w9F382kMA/SjjlVk3sJS",
	"bJaxspP37jJOeuRZvtOyY0pyr3dp4dFK1CEELuQu1Mk7yRVNcuVoru2gNPptJI5XFUG43c2Ssbwsi1+l",
	"038xwP4oSZbkSau2VcOmTY4yDJrm0ik4u5n55fD+73V4fxauqadG8/hmfAEZdPaozoxcKbsGHqVSs7cF",
	"L3r1b6VX86Lo6HvW1VNb8RbCxHQMa4Y3jX1uWXRKDtarIKNWH6lDc7x+Vpjmi4L9UzwcL4ruP0/RNfb2",
	"K8qggpaMKpTkjU0V264gC0KorCcj8XjR8aI2/11d849Umwde5P4lNlYd89MWU8nsK/vCRKnw8yPt0OIG",
	"y11GP2qj/VK8kf432m3H+zuX325/MW9L+/Tou/lU0+rN5H5mzV140J54gsVqd8VZivWLEfunGLF/SXle",
	"o3PKOLUNrAzTP0YDROJZWf1FF7xYXrUlugpL01WonxBb90FF6hu4P3GQLxiQqXC996LwCcz/SzqTZ4nP",
	"S+G9sPEfe1XwZ4n4ultwa87rJ/2D8XGoLUEjzwaQmCSyBaILBsMldqEPKFMpZyZ9BoSQCWxTz7CqSLeB",
	"cZK6qD3aOMAC36HkPcbkMUjrnEjyXgGP3CWAfEpyg/rUhb4qrGrul7l9K4rpArwemPl0pn0xurgtEq5E",
	"CbpLmze8hFwFVtENSZN4iveLWDTUjbZ5zDdNaFe+nCmxAExkjsuQypGCPgecymmTBQcuJOq9zExOZ5Is",
	"xH0T3w+nhC8hU55QGnmJX2uzhALdIQYC5C7lVAPlYU2ivu3TabqXncj+gIhMUnO1RDO88ChZVHzt+W8V",
	"+FDeKEff9QetcbKVCJqq4tyRKibd5NuKzb+TPyf15Msl9OrG/fu+qaNQUfVuy1W4ZPMpSWJn9i73p2Si",
	"pXp8aha2oP5juCKpGJGFVBrmPzCL4DCdk/JiPelvZUIzfTXmESxuBOkh5cMPYGt3G5BdfA2eha0N/k/j",
	"6LPqOt0vzPwXYGZbZ7JJtpanPC+WxzyAdUtlLJ+bY0vVNZ/EqUVoLxz653PofFu1SStbTQ2tRwhUA1rb",
	"iHUYsz5f2hqZT2JHA+SFC/98LsRbKgdaJtSVyx7Bg9kyg88sG021wyexoIbxwoF/PgeuUdwMqwss/mJr",
	"OR7Af0kBxufmuqQO5JP4zkJ54bw/gPO2Oag1AhWlsijTtWFMqRn9VF+2ooxqkWTlqTAmF4UisgW0TLnt",
	"NFkrKbOaCc1JQo906ZfUR7RGBGDOo0xlp3xxIAC+qKuaKYFpdLwcM1MFvFhpYmgeXaREoHth63+VC7w0",
	"ANQR72nEjYrqyxDAh7F+bUKkNXqCyBe4KRCBRADMqW9etIDEqypNUy7fY1+VTGPDKkK+LFVtnS9zZSXp",
	"kL+oAtmaXtm8OR2zX4w6U75NT55bbXCVHwPKspFUDbCkG+WMUw5NHwpTwYFR6C5VGSEpS+Y+uldFdHX5",
	"66pCPjpGawnvVNkGd0nVgx00QLZ8pX4LSKcrxTRKR8YZgkMwh7qIhHpLRWKjiogwOQXEsGQsVbXQs05g",
	"WzDSOTP8rfzNZfbPPDFWKnSUq8uUvtiar9CkaifeQYZpxKckAZL4PTOVjOy2sKW4bPE4uwXzHtg7zOQe",
	"mxJTs9XUU5IU0HZGC3xZYh9JqinPawCJ3pO28lGSqqTe3kvySCTH2wGxsPXsggCpR1gUlhLkHDOuwu64",
	"XCXl0K6iEAeSJSnz9FOAqhQUAVGowhGhQJnikiVCpM5dUy6GR0For5/UWlZIuGRl06W7sohdZRBzfnz7",
	"8X8BAAD//yUJzoC9twAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
