// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Applications request
	GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationNameClustermanagers request
	GetApiV1OrganizationsOrganizationNameClustermanagers(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationNameClusters request
	GetApiV1OrganizationsOrganizationNameClusters(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationNameProjects request
	GetApiV1OrganizationsOrganizationNameProjects(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationsOrganizationNameProjects request with any body
	PostApiV1OrganizationsOrganizationNameProjectsWithBody(ctx context.Context, organizationName OrganizationNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1OrganizationsOrganizationNameProjects(ctx context.Context, organizationName OrganizationNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1OrganizationsOrganizationNameProjectsProjectName request
	DeleteApiV1OrganizationsOrganizationNameProjectsProjectName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers request with any body
	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName request
	DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName request with any body
	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters request with any body
	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName request
	DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName request with any body
	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfig request
	GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfig(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Regions request
	GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationNameClustermanagers(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationNameClustermanagersRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationNameClusters(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationNameClustersRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationNameProjects(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationNameProjectsRequest(c.Server, organizationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationNameProjectsWithBody(ctx context.Context, organizationName OrganizationNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationNameProjectsRequestWithBody(c.Server, organizationName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationNameProjects(ctx context.Context, organizationName OrganizationNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationNameProjectsRequest(c.Server, organizationName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationsOrganizationNameProjectsProjectName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameRequest(c.Server, organizationName, projectName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequestWithBody(c.Server, organizationName, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequest(c.Server, organizationName, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequest(c.Server, organizationName, projectName, clusterManagerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody(c.Server, organizationName, projectName, clusterManagerName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequest(c.Server, organizationName, projectName, clusterManagerName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequestWithBody(c.Server, organizationName, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequest(c.Server, organizationName, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequest(c.Server, organizationName, projectName, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithBody(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequestWithBody(c.Server, organizationName, projectName, clusterName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequest(c.Server, organizationName, projectName, clusterName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfig(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigRequest(c.Server, organizationName, projectName, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameFlavorsRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameImagesRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ApplicationsRequest generates requests for GetApiV1Applications
func NewGetApiV1ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationNameClustermanagersRequest generates requests for GetApiV1OrganizationsOrganizationNameClustermanagers
func NewGetApiV1OrganizationsOrganizationNameClustermanagersRequest(server string, organizationName OrganizationNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/clustermanagers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationNameClustersRequest generates requests for GetApiV1OrganizationsOrganizationNameClusters
func NewGetApiV1OrganizationsOrganizationNameClustersRequest(server string, organizationName OrganizationNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationNameProjectsRequest generates requests for GetApiV1OrganizationsOrganizationNameProjects
func NewGetApiV1OrganizationsOrganizationNameProjectsRequest(server string, organizationName OrganizationNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationsOrganizationNameProjectsRequest calls the generic PostApiV1OrganizationsOrganizationNameProjects builder with application/json body
func NewPostApiV1OrganizationsOrganizationNameProjectsRequest(server string, organizationName OrganizationNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationsOrganizationNameProjectsRequestWithBody(server, organizationName, "application/json", bodyReader)
}

// NewPostApiV1OrganizationsOrganizationNameProjectsRequestWithBody generates requests for PostApiV1OrganizationsOrganizationNameProjects with any type of body
func NewPostApiV1OrganizationsOrganizationNameProjectsRequestWithBody(server string, organizationName OrganizationNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameRequest generates requests for DeleteApiV1OrganizationsOrganizationNameProjectsProjectName
func NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequest calls the generic PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers builder with application/json body
func NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequestWithBody(server, organizationName, projectName, "application/json", bodyReader)
}

// NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequestWithBody generates requests for PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers with any type of body
func NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersRequestWithBody(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clustermanagers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequest generates requests for DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName
func NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterManagerName", runtime.ParamLocationPath, clusterManagerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clustermanagers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequest calls the generic PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName builder with application/json body
func NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody(server, organizationName, projectName, clusterManagerName, "application/json", bodyReader)
}

// NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody generates requests for PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName with any type of body
func NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterManagerName", runtime.ParamLocationPath, clusterManagerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clustermanagers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequest calls the generic PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters builder with application/json body
func NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequestWithBody(server, organizationName, projectName, "application/json", bodyReader)
}

// NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequestWithBody generates requests for PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters with any type of body
func NewPostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersRequestWithBody(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequest generates requests for DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName
func NewDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequest calls the generic PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName builder with application/json body
func NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequestWithBody(server, organizationName, projectName, clusterName, "application/json", bodyReader)
}

// NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequestWithBody generates requests for PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName with any type of body
func NewPutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameRequestWithBody(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigRequest generates requests for GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfig
func NewGetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigRequest(server string, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationName", runtime.ParamLocationPath, organizationName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters/%s/kubeconfig", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRequest generates requests for GetApiV1Regions
func NewGetApiV1RegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameFlavorsRequest generates requests for GetApiV1RegionsRegionNameFlavors
func NewGetApiV1RegionsRegionNameFlavorsRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/flavors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameImagesRequest generates requests for GetApiV1RegionsRegionNameImages
func NewGetApiV1RegionsRegionNameImagesRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1Applications request
	GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error)

	// GetApiV1OrganizationsOrganizationNameClustermanagers request
	GetApiV1OrganizationsOrganizationNameClustermanagersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameClustermanagersResponse, error)

	// GetApiV1OrganizationsOrganizationNameClusters request
	GetApiV1OrganizationsOrganizationNameClustersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameClustersResponse, error)

	// GetApiV1OrganizationsOrganizationNameProjects request
	GetApiV1OrganizationsOrganizationNameProjectsWithResponse(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameProjectsResponse, error)

	// PostApiV1OrganizationsOrganizationNameProjects request with any body
	PostApiV1OrganizationsOrganizationNameProjectsWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsResponse, error)

	PostApiV1OrganizationsOrganizationNameProjectsWithResponse(ctx context.Context, organizationName OrganizationNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsResponse, error)

	// DeleteApiV1OrganizationsOrganizationNameProjectsProjectName request
	DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse, error)

	// PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers request with any body
	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse, error)

	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse, error)

	// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName request
	DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error)

	// PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName request with any body
	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error)

	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error)

	// PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters request with any body
	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse, error)

	PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse, error)

	// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName request
	DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error)

	// PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName request with any body
	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error)

	PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error)

	// GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfig request
	GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse, error)

	// GetApiV1Regions request
	GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error)
}

type GetApiV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Applications
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationNameClustermanagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterManagers
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationNameClustermanagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationNameClustermanagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationNameClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusters
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationNameClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationNameClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationNameProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationNameProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationNameProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationsOrganizationNameProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationsOrganizationNameProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationsOrganizationNameProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regions
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameFlavorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flavors
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameFlavorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameFlavorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Images
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ApplicationsWithResponse request returning *GetApiV1ApplicationsResponse
func (c *ClientWithResponses) GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error) {
	rsp, err := c.GetApiV1Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsResponse(rsp)
}

// GetApiV1OrganizationsOrganizationNameClustermanagersWithResponse request returning *GetApiV1OrganizationsOrganizationNameClustermanagersResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationNameClustermanagersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameClustermanagersResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationNameClustermanagers(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationNameClustermanagersResponse(rsp)
}

// GetApiV1OrganizationsOrganizationNameClustersWithResponse request returning *GetApiV1OrganizationsOrganizationNameClustersResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationNameClustersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameClustersResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationNameClusters(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationNameClustersResponse(rsp)
}

// GetApiV1OrganizationsOrganizationNameProjectsWithResponse request returning *GetApiV1OrganizationsOrganizationNameProjectsResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationNameProjectsWithResponse(ctx context.Context, organizationName OrganizationNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameProjectsResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationNameProjects(ctx, organizationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationNameProjectsResponse(rsp)
}

// PostApiV1OrganizationsOrganizationNameProjectsWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationsOrganizationNameProjectsResponse
func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationNameProjectsWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationNameProjectsWithBody(ctx, organizationName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationNameProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationNameProjectsWithResponse(ctx context.Context, organizationName OrganizationNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationNameProjects(ctx, organizationName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationNameProjectsResponse(rsp)
}

// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameWithResponse request returning *DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationsOrganizationNameProjectsProjectName(ctx, organizationName, projectName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse(rsp)
}

// PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse
func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithBody(ctx, organizationName, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagers(ctx, organizationName, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse(rsp)
}

// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse request returning *DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName(ctx, organizationName, projectName, clusterManagerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp)
}

// PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithBodyWithResponse request with arbitrary body returning *PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse
func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithBody(ctx, organizationName, projectName, clusterManagerName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerName(ctx, organizationName, projectName, clusterManagerName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp)
}

// PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse
func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithBody(ctx, organizationName, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, body PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationNameProjectsProjectNameClusters(ctx, organizationName, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse(rsp)
}

// DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse request returning *DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName(ctx, organizationName, projectName, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse(rsp)
}

// PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithBodyWithResponse request with arbitrary body returning *PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse
func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithBodyWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithBody(ctx, organizationName, projectName, clusterName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterName(ctx, organizationName, projectName, clusterName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse(rsp)
}

// GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigWithResponse request returning *GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigWithResponse(ctx context.Context, organizationName OrganizationNameParameter, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfig(ctx, organizationName, projectName, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse(rsp)
}

// GetApiV1RegionsWithResponse request returning *GetApiV1RegionsResponse
func (c *ClientWithResponses) GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error) {
	rsp, err := c.GetApiV1Regions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsResponse(rsp)
}

// GetApiV1RegionsRegionNameFlavorsWithResponse request returning *GetApiV1RegionsRegionNameFlavorsResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameFlavors(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp)
}

// GetApiV1RegionsRegionNameImagesWithResponse request returning *GetApiV1RegionsRegionNameImagesResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameImages(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameImagesResponse(rsp)
}

// ParseGetApiV1ApplicationsResponse parses an HTTP response from a GetApiV1ApplicationsWithResponse call
func ParseGetApiV1ApplicationsResponse(rsp *http.Response) (*GetApiV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationNameClustermanagersResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationNameClustermanagersWithResponse call
func ParseGetApiV1OrganizationsOrganizationNameClustermanagersResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationNameClustermanagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationNameClustermanagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterManagers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationNameClustersResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationNameClustersWithResponse call
func ParseGetApiV1OrganizationsOrganizationNameClustersResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationNameClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationNameClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationNameProjectsResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationNameProjectsWithResponse call
func ParseGetApiV1OrganizationsOrganizationNameProjectsResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationNameProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationNameProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationsOrganizationNameProjectsResponse parses an HTTP response from a PostApiV1OrganizationsOrganizationNameProjectsWithResponse call
func ParsePostApiV1OrganizationsOrganizationNameProjectsResponse(rsp *http.Response) (*PostApiV1OrganizationsOrganizationNameProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationsOrganizationNameProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse parses an HTTP response from a DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameWithResponse call
func ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse(rsp *http.Response) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse parses an HTTP response from a PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersWithResponse call
func ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse(rsp *http.Response) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse parses an HTTP response from a DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse call
func ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp *http.Response) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse parses an HTTP response from a PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameWithResponse call
func ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp *http.Response) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustermanagersClusterManagerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse parses an HTTP response from a PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersWithResponse call
func ParsePostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse(rsp *http.Response) (*PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationsOrganizationNameProjectsProjectNameClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse parses an HTTP response from a DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse call
func ParseDeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse(rsp *http.Response) (*DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse parses an HTTP response from a PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameWithResponse call
func ParsePutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse(rsp *http.Response) (*PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigWithResponse call
func ParseGetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationNameProjectsProjectNameClustersClusterNameKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsResponse parses an HTTP response from a GetApiV1RegionsWithResponse call
func ParseGetApiV1RegionsResponse(rsp *http.Response) (*GetApiV1RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameFlavorsResponse parses an HTTP response from a GetApiV1RegionsRegionNameFlavorsWithResponse call
func ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameFlavorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flavors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameImagesResponse parses an HTTP response from a GetApiV1RegionsRegionNameImagesWithResponse call
func ParseGetApiV1RegionsRegionNameImagesResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Images
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
