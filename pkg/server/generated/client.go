// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Applications request
	GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationClustermanagers request
	GetApiV1OrganizationsOrganizationClustermanagers(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationClusters request
	GetApiV1OrganizationsOrganizationClusters(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers request with any body
	PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager request
	DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager request with any body
	PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1OrganizationsOrganizationProjectsProjectClusters request with any body
	PostApiV1OrganizationsOrganizationProjectsProjectClustersWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1OrganizationsOrganizationProjectsProjectClusters(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster request
	DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster request with any body
	PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig request
	GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Regions request
	GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationClustermanagers(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationClustermanagersRequest(c.Server, organization)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationClusters(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationClustersRequest(c.Server, organization)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequestWithBody(c.Server, organization, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequest(c.Server, organization, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequest(c.Server, organization, project, clusterManager)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequestWithBody(c.Server, organization, project, clusterManager, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequest(c.Server, organization, project, clusterManager, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationProjectsProjectClustersWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequestWithBody(c.Server, organization, project, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1OrganizationsOrganizationProjectsProjectClusters(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequest(c.Server, organization, project, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequest(c.Server, organization, project, cluster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithBody(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequestWithBody(c.Server, organization, project, cluster, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequest(c.Server, organization, project, cluster, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigRequest(c.Server, organization, project, cluster)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameFlavorsRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameImagesRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ApplicationsRequest generates requests for GetApiV1Applications
func NewGetApiV1ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationClustermanagersRequest generates requests for GetApiV1OrganizationsOrganizationClustermanagers
func NewGetApiV1OrganizationsOrganizationClustermanagersRequest(server string, organization OrganizationParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/clustermanagers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationClustersRequest generates requests for GetApiV1OrganizationsOrganizationClusters
func NewGetApiV1OrganizationsOrganizationClustersRequest(server string, organization OrganizationParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequest calls the generic PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers builder with application/json body
func NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequest(server string, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequestWithBody(server, organization, project, "application/json", bodyReader)
}

// NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequestWithBody generates requests for PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers with any type of body
func NewPostApiV1OrganizationsOrganizationProjectsProjectClustermanagersRequestWithBody(server string, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clustermanagers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequest generates requests for DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager
func NewDeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequest(server string, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterManager", runtime.ParamLocationPath, clusterManager)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clustermanagers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequest calls the generic PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager builder with application/json body
func NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequest(server string, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequestWithBody(server, organization, project, clusterManager, "application/json", bodyReader)
}

// NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequestWithBody generates requests for PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager with any type of body
func NewPutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerRequestWithBody(server string, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterManager", runtime.ParamLocationPath, clusterManager)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clustermanagers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequest calls the generic PostApiV1OrganizationsOrganizationProjectsProjectClusters builder with application/json body
func NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequest(server string, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequestWithBody(server, organization, project, "application/json", bodyReader)
}

// NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequestWithBody generates requests for PostApiV1OrganizationsOrganizationProjectsProjectClusters with any type of body
func NewPostApiV1OrganizationsOrganizationProjectsProjectClustersRequestWithBody(server string, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequest generates requests for DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster
func NewDeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequest(server string, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequest calls the generic PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster builder with application/json body
func NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequest(server string, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequestWithBody(server, organization, project, cluster, "application/json", bodyReader)
}

// NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequestWithBody generates requests for PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster with any type of body
func NewPutApiV1OrganizationsOrganizationProjectsProjectClustersClusterRequestWithBody(server string, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigRequest generates requests for GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig
func NewGetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigRequest(server string, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organization", runtime.ParamLocationPath, organization)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cluster", runtime.ParamLocationPath, cluster)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/projects/%s/clusters/%s/kubeconfig", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRequest generates requests for GetApiV1Regions
func NewGetApiV1RegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameFlavorsRequest generates requests for GetApiV1RegionsRegionNameFlavors
func NewGetApiV1RegionsRegionNameFlavorsRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/flavors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameImagesRequest generates requests for GetApiV1RegionsRegionNameImages
func NewGetApiV1RegionsRegionNameImagesRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1Applications request
	GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error)

	// GetApiV1OrganizationsOrganizationClustermanagers request
	GetApiV1OrganizationsOrganizationClustermanagersWithResponse(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationClustermanagersResponse, error)

	// GetApiV1OrganizationsOrganizationClusters request
	GetApiV1OrganizationsOrganizationClustersWithResponse(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationClustersResponse, error)

	// PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers request with any body
	PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse, error)

	PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse, error)

	// DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager request
	DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error)

	// PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager request with any body
	PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error)

	PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error)

	// PostApiV1OrganizationsOrganizationProjectsProjectClusters request with any body
	PostApiV1OrganizationsOrganizationProjectsProjectClustersWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse, error)

	PostApiV1OrganizationsOrganizationProjectsProjectClustersWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse, error)

	// DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster request
	DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error)

	// PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster request with any body
	PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error)

	PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error)

	// GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig request
	GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse, error)

	// GetApiV1Regions request
	GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error)
}

type GetApiV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Applications
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationClustermanagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterManagers
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationClustermanagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationClustermanagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusters
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regions
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameFlavorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flavors
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameFlavorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameFlavorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Images
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ApplicationsWithResponse request returning *GetApiV1ApplicationsResponse
func (c *ClientWithResponses) GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error) {
	rsp, err := c.GetApiV1Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsResponse(rsp)
}

// GetApiV1OrganizationsOrganizationClustermanagersWithResponse request returning *GetApiV1OrganizationsOrganizationClustermanagersResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationClustermanagersWithResponse(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationClustermanagersResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationClustermanagers(ctx, organization, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationClustermanagersResponse(rsp)
}

// GetApiV1OrganizationsOrganizationClustersWithResponse request returning *GetApiV1OrganizationsOrganizationClustersResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationClustersWithResponse(ctx context.Context, organization OrganizationParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationClustersResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationClusters(ctx, organization, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationClustersResponse(rsp)
}

// PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse
func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithBody(ctx, organization, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers(ctx, organization, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse(rsp)
}

// DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse request returning *DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(ctx, organization, project, clusterManager, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse(rsp)
}

// PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithBodyWithResponse request with arbitrary body returning *PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse
func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithBody(ctx, organization, project, clusterManager, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(ctx, organization, project, clusterManager, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse(rsp)
}

// PostApiV1OrganizationsOrganizationProjectsProjectClustersWithBodyWithResponse request with arbitrary body returning *PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse
func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationProjectsProjectClustersWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationProjectsProjectClustersWithBody(ctx, organization, project, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationProjectsProjectClustersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1OrganizationsOrganizationProjectsProjectClustersWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, body PostApiV1OrganizationsOrganizationProjectsProjectClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse, error) {
	rsp, err := c.PostApiV1OrganizationsOrganizationProjectsProjectClusters(ctx, organization, project, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationsOrganizationProjectsProjectClustersResponse(rsp)
}

// DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse request returning *DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error) {
	rsp, err := c.DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster(ctx, organization, project, cluster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse(rsp)
}

// PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithBodyWithResponse request with arbitrary body returning *PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse
func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithBodyWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithBody(ctx, organization, project, cluster, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, body PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error) {
	rsp, err := c.PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster(ctx, organization, project, cluster, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse(rsp)
}

// GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigWithResponse request returning *GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse
func (c *ClientWithResponses) GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigWithResponse(ctx context.Context, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter, reqEditors ...RequestEditorFn) (*GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse, error) {
	rsp, err := c.GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig(ctx, organization, project, cluster, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse(rsp)
}

// GetApiV1RegionsWithResponse request returning *GetApiV1RegionsResponse
func (c *ClientWithResponses) GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error) {
	rsp, err := c.GetApiV1Regions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsResponse(rsp)
}

// GetApiV1RegionsRegionNameFlavorsWithResponse request returning *GetApiV1RegionsRegionNameFlavorsResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameFlavors(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp)
}

// GetApiV1RegionsRegionNameImagesWithResponse request returning *GetApiV1RegionsRegionNameImagesResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameImages(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameImagesResponse(rsp)
}

// ParseGetApiV1ApplicationsResponse parses an HTTP response from a GetApiV1ApplicationsWithResponse call
func ParseGetApiV1ApplicationsResponse(rsp *http.Response) (*GetApiV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationClustermanagersResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationClustermanagersWithResponse call
func ParseGetApiV1OrganizationsOrganizationClustermanagersResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationClustermanagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationClustermanagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterManagers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationClustersResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationClustersWithResponse call
func ParseGetApiV1OrganizationsOrganizationClustersResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse parses an HTTP response from a PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersWithResponse call
func ParsePostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse(rsp *http.Response) (*PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationsOrganizationProjectsProjectClustermanagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse parses an HTTP response from a DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse call
func ParseDeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse(rsp *http.Response) (*DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse parses an HTTP response from a PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerWithResponse call
func ParsePutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse(rsp *http.Response) (*PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManagerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationsOrganizationProjectsProjectClustersResponse parses an HTTP response from a PostApiV1OrganizationsOrganizationProjectsProjectClustersWithResponse call
func ParsePostApiV1OrganizationsOrganizationProjectsProjectClustersResponse(rsp *http.Response) (*PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationsOrganizationProjectsProjectClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse parses an HTTP response from a DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse call
func ParseDeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse(rsp *http.Response) (*DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse parses an HTTP response from a PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterWithResponse call
func ParsePutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse(rsp *http.Response) (*PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1OrganizationsOrganizationProjectsProjectClustersClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse parses an HTTP response from a GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigWithResponse call
func ParseGetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse(rsp *http.Response) (*GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsResponse parses an HTTP response from a GetApiV1RegionsWithResponse call
func ParseGetApiV1RegionsResponse(rsp *http.Response) (*GetApiV1RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameFlavorsResponse parses an HTTP response from a GetApiV1RegionsRegionNameFlavorsWithResponse call
func ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameFlavorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flavors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameImagesResponse parses an HTTP response from a GetApiV1RegionsRegionNameImagesWithResponse call
func ParseGetApiV1RegionsRegionNameImagesResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Images
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
