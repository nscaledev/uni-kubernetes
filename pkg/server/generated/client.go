// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Applications request
	GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Clusters request
	GetApiV1Clusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Controlplanes request
	GetApiV1Controlplanes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1Organization request
	DeleteApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Organization request
	PostApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Projects request
	GetApiV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Projects request with any body
	PostApiV1ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Projects(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ProjectsProjectName request
	DeleteApiV1ProjectsProjectName(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ProjectsProjectNameControlplanes request with any body
	PostApiV1ProjectsProjectNameControlplanesWithBody(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ProjectsProjectNameControlplanes(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameControlplanesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ProjectsProjectNameControlplanesControlPlaneName request
	DeleteApiV1ProjectsProjectNameControlplanesControlPlaneName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ProjectsProjectNameControlplanesControlPlaneName request with any body
	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithBody(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ProjectsProjectNameControlplanesControlPlaneName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters request with any body
	PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithBody(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName request
	DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName request with any body
	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithBody(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfig request
	GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfig(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Regions request
	GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Clusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Controlplanes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ControlplanesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Projects(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ProjectsProjectName(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ProjectsProjectNameRequest(c.Server, projectName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameControlplanesWithBody(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameControlplanesRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameControlplanes(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameControlplanesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameControlplanesRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ProjectsProjectNameControlplanesControlPlaneName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameRequest(c.Server, projectName, controlPlaneName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithBody(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequestWithBody(c.Server, projectName, controlPlaneName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameControlplanesControlPlaneName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequest(c.Server, projectName, controlPlaneName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithBody(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequestWithBody(c.Server, projectName, controlPlaneName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequest(c.Server, projectName, controlPlaneName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequest(c.Server, projectName, controlPlaneName, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithBody(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequestWithBody(c.Server, projectName, controlPlaneName, clusterName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequest(c.Server, projectName, controlPlaneName, clusterName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfig(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigRequest(c.Server, projectName, controlPlaneName, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameFlavorsRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameImagesRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ApplicationsRequest generates requests for GetApiV1Applications
func NewGetApiV1ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ClustersRequest generates requests for GetApiV1Clusters
func NewGetApiV1ClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ControlplanesRequest generates requests for GetApiV1Controlplanes
func NewGetApiV1ControlplanesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/controlplanes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1OrganizationRequest generates requests for DeleteApiV1Organization
func NewDeleteApiV1OrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationRequest generates requests for PostApiV1Organization
func NewPostApiV1OrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ProjectsRequest generates requests for GetApiV1Projects
func NewGetApiV1ProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ProjectsRequest calls the generic PostApiV1Projects builder with application/json body
func NewPostApiV1ProjectsRequest(server string, body PostApiV1ProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ProjectsRequestWithBody generates requests for PostApiV1Projects with any type of body
func NewPostApiV1ProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ProjectsProjectNameRequest generates requests for DeleteApiV1ProjectsProjectName
func NewDeleteApiV1ProjectsProjectNameRequest(server string, projectName ProjectNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ProjectsProjectNameControlplanesRequest calls the generic PostApiV1ProjectsProjectNameControlplanes builder with application/json body
func NewPostApiV1ProjectsProjectNameControlplanesRequest(server string, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameControlplanesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ProjectsProjectNameControlplanesRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostApiV1ProjectsProjectNameControlplanesRequestWithBody generates requests for PostApiV1ProjectsProjectNameControlplanes with any type of body
func NewPostApiV1ProjectsProjectNameControlplanesRequestWithBody(server string, projectName ProjectNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameRequest generates requests for DeleteApiV1ProjectsProjectNameControlplanesControlPlaneName
func NewDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameRequest(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "controlPlaneName", runtime.ParamLocationPath, controlPlaneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequest calls the generic PutApiV1ProjectsProjectNameControlplanesControlPlaneName builder with application/json body
func NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequest(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequestWithBody(server, projectName, controlPlaneName, "application/json", bodyReader)
}

// NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequestWithBody generates requests for PutApiV1ProjectsProjectNameControlplanesControlPlaneName with any type of body
func NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameRequestWithBody(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "controlPlaneName", runtime.ParamLocationPath, controlPlaneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequest calls the generic PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters builder with application/json body
func NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequest(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequestWithBody(server, projectName, controlPlaneName, "application/json", bodyReader)
}

// NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequestWithBody generates requests for PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters with any type of body
func NewPostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersRequestWithBody(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "controlPlaneName", runtime.ParamLocationPath, controlPlaneName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes/%s/clusters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequest generates requests for DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName
func NewDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequest(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "controlPlaneName", runtime.ParamLocationPath, controlPlaneName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes/%s/clusters/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequest calls the generic PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName builder with application/json body
func NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequest(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequestWithBody(server, projectName, controlPlaneName, clusterName, "application/json", bodyReader)
}

// NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequestWithBody generates requests for PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName with any type of body
func NewPutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameRequestWithBody(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "controlPlaneName", runtime.ParamLocationPath, controlPlaneName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes/%s/clusters/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigRequest generates requests for GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfig
func NewGetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigRequest(server string, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "controlPlaneName", runtime.ParamLocationPath, controlPlaneName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/controlplanes/%s/clusters/%s/kubeconfig", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRequest generates requests for GetApiV1Regions
func NewGetApiV1RegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameFlavorsRequest generates requests for GetApiV1RegionsRegionNameFlavors
func NewGetApiV1RegionsRegionNameFlavorsRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/flavors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameImagesRequest generates requests for GetApiV1RegionsRegionNameImages
func NewGetApiV1RegionsRegionNameImagesRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1Applications request
	GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error)

	// GetApiV1Clusters request
	GetApiV1ClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ClustersResponse, error)

	// GetApiV1Controlplanes request
	GetApiV1ControlplanesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ControlplanesResponse, error)

	// DeleteApiV1Organization request
	DeleteApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationResponse, error)

	// PostApiV1Organization request
	PostApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error)

	// GetApiV1Projects request
	GetApiV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsResponse, error)

	// PostApiV1Projects request with any body
	PostApiV1ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error)

	PostApiV1ProjectsWithResponse(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error)

	// DeleteApiV1ProjectsProjectName request
	DeleteApiV1ProjectsProjectNameWithResponse(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameResponse, error)

	// PostApiV1ProjectsProjectNameControlplanes request with any body
	PostApiV1ProjectsProjectNameControlplanesWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesResponse, error)

	PostApiV1ProjectsProjectNameControlplanesWithResponse(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameControlplanesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesResponse, error)

	// DeleteApiV1ProjectsProjectNameControlplanesControlPlaneName request
	DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error)

	// PutApiV1ProjectsProjectNameControlplanesControlPlaneName request with any body
	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error)

	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error)

	// PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters request with any body
	PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse, error)

	PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse, error)

	// DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName request
	DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error)

	// PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName request with any body
	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error)

	PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error)

	// GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfig request
	GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse, error)

	// GetApiV1Regions request
	GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error)
}

type GetApiV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Applications
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusters
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ControlplanesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ControlPlanes
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ControlplanesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ControlplanesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ProjectsProjectNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ProjectsProjectNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ProjectsProjectNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ProjectsProjectNameControlplanesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1ProjectsProjectNameControlplanesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ProjectsProjectNameControlplanesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regions
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameFlavorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpenstackFlavors
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameFlavorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameFlavorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OpenstackImages
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ApplicationsWithResponse request returning *GetApiV1ApplicationsResponse
func (c *ClientWithResponses) GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error) {
	rsp, err := c.GetApiV1Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsResponse(rsp)
}

// GetApiV1ClustersWithResponse request returning *GetApiV1ClustersResponse
func (c *ClientWithResponses) GetApiV1ClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ClustersResponse, error) {
	rsp, err := c.GetApiV1Clusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ClustersResponse(rsp)
}

// GetApiV1ControlplanesWithResponse request returning *GetApiV1ControlplanesResponse
func (c *ClientWithResponses) GetApiV1ControlplanesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ControlplanesResponse, error) {
	rsp, err := c.GetApiV1Controlplanes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ControlplanesResponse(rsp)
}

// DeleteApiV1OrganizationWithResponse request returning *DeleteApiV1OrganizationResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationResponse, error) {
	rsp, err := c.DeleteApiV1Organization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationResponse(rsp)
}

// PostApiV1OrganizationWithResponse request returning *PostApiV1OrganizationResponse
func (c *ClientWithResponses) PostApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error) {
	rsp, err := c.PostApiV1Organization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationResponse(rsp)
}

// GetApiV1ProjectsWithResponse request returning *GetApiV1ProjectsResponse
func (c *ClientWithResponses) GetApiV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsResponse, error) {
	rsp, err := c.GetApiV1Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ProjectsResponse(rsp)
}

// PostApiV1ProjectsWithBodyWithResponse request with arbitrary body returning *PostApiV1ProjectsResponse
func (c *ClientWithResponses) PostApiV1ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error) {
	rsp, err := c.PostApiV1ProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ProjectsWithResponse(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error) {
	rsp, err := c.PostApiV1Projects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsResponse(rsp)
}

// DeleteApiV1ProjectsProjectNameWithResponse request returning *DeleteApiV1ProjectsProjectNameResponse
func (c *ClientWithResponses) DeleteApiV1ProjectsProjectNameWithResponse(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameResponse, error) {
	rsp, err := c.DeleteApiV1ProjectsProjectName(ctx, projectName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ProjectsProjectNameResponse(rsp)
}

// PostApiV1ProjectsProjectNameControlplanesWithBodyWithResponse request with arbitrary body returning *PostApiV1ProjectsProjectNameControlplanesResponse
func (c *ClientWithResponses) PostApiV1ProjectsProjectNameControlplanesWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameControlplanesWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameControlplanesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ProjectsProjectNameControlplanesWithResponse(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameControlplanesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameControlplanes(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameControlplanesResponse(rsp)
}

// DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse request returning *DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse
func (c *ClientWithResponses) DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error) {
	rsp, err := c.DeleteApiV1ProjectsProjectNameControlplanesControlPlaneName(ctx, projectName, controlPlaneName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse(rsp)
}

// PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithBodyWithResponse request with arbitrary body returning *PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse
func (c *ClientWithResponses) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithBody(ctx, projectName, controlPlaneName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameControlplanesControlPlaneName(ctx, projectName, controlPlaneName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse(rsp)
}

// PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithBodyWithResponse request with arbitrary body returning *PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse
func (c *ClientWithResponses) PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithBody(ctx, projectName, controlPlaneName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, body PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClusters(ctx, projectName, controlPlaneName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse(rsp)
}

// DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse request returning *DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse
func (c *ClientWithResponses) DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error) {
	rsp, err := c.DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName(ctx, projectName, controlPlaneName, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse(rsp)
}

// PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithBodyWithResponse request with arbitrary body returning *PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse
func (c *ClientWithResponses) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithBody(ctx, projectName, controlPlaneName, clusterName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterName(ctx, projectName, controlPlaneName, clusterName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse(rsp)
}

// GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigWithResponse request returning *GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse
func (c *ClientWithResponses) GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigWithResponse(ctx context.Context, projectName ProjectNameParameter, controlPlaneName ControlPlaneNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse, error) {
	rsp, err := c.GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfig(ctx, projectName, controlPlaneName, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse(rsp)
}

// GetApiV1RegionsWithResponse request returning *GetApiV1RegionsResponse
func (c *ClientWithResponses) GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error) {
	rsp, err := c.GetApiV1Regions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsResponse(rsp)
}

// GetApiV1RegionsRegionNameFlavorsWithResponse request returning *GetApiV1RegionsRegionNameFlavorsResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameFlavors(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp)
}

// GetApiV1RegionsRegionNameImagesWithResponse request returning *GetApiV1RegionsRegionNameImagesResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameImages(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameImagesResponse(rsp)
}

// ParseGetApiV1ApplicationsResponse parses an HTTP response from a GetApiV1ApplicationsWithResponse call
func ParseGetApiV1ApplicationsResponse(rsp *http.Response) (*GetApiV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ClustersResponse parses an HTTP response from a GetApiV1ClustersWithResponse call
func ParseGetApiV1ClustersResponse(rsp *http.Response) (*GetApiV1ClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ControlplanesResponse parses an HTTP response from a GetApiV1ControlplanesWithResponse call
func ParseGetApiV1ControlplanesResponse(rsp *http.Response) (*GetApiV1ControlplanesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ControlplanesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ControlPlanes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationResponse parses an HTTP response from a DeleteApiV1OrganizationWithResponse call
func ParseDeleteApiV1OrganizationResponse(rsp *http.Response) (*DeleteApiV1OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationResponse parses an HTTP response from a PostApiV1OrganizationWithResponse call
func ParsePostApiV1OrganizationResponse(rsp *http.Response) (*PostApiV1OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ProjectsResponse parses an HTTP response from a GetApiV1ProjectsWithResponse call
func ParseGetApiV1ProjectsResponse(rsp *http.Response) (*GetApiV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ProjectsResponse parses an HTTP response from a PostApiV1ProjectsWithResponse call
func ParsePostApiV1ProjectsResponse(rsp *http.Response) (*PostApiV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ProjectsProjectNameResponse parses an HTTP response from a DeleteApiV1ProjectsProjectNameWithResponse call
func ParseDeleteApiV1ProjectsProjectNameResponse(rsp *http.Response) (*DeleteApiV1ProjectsProjectNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ProjectsProjectNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ProjectsProjectNameControlplanesResponse parses an HTTP response from a PostApiV1ProjectsProjectNameControlplanesWithResponse call
func ParsePostApiV1ProjectsProjectNameControlplanesResponse(rsp *http.Response) (*PostApiV1ProjectsProjectNameControlplanesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ProjectsProjectNameControlplanesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse parses an HTTP response from a DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse call
func ParseDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse(rsp *http.Response) (*DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse parses an HTTP response from a PutApiV1ProjectsProjectNameControlplanesControlPlaneNameWithResponse call
func ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse(rsp *http.Response) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ProjectsProjectNameControlplanesControlPlaneNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse parses an HTTP response from a PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersWithResponse call
func ParsePostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse(rsp *http.Response) (*PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse parses an HTTP response from a DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse call
func ParseDeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse(rsp *http.Response) (*DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse parses an HTTP response from a PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameWithResponse call
func ParsePutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse(rsp *http.Response) (*PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse parses an HTTP response from a GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigWithResponse call
func ParseGetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse(rsp *http.Response) (*GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ProjectsProjectNameControlplanesControlPlaneNameClustersClusterNameKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsResponse parses an HTTP response from a GetApiV1RegionsWithResponse call
func ParseGetApiV1RegionsResponse(rsp *http.Response) (*GetApiV1RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameFlavorsResponse parses an HTTP response from a GetApiV1RegionsRegionNameFlavorsWithResponse call
func ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameFlavorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpenstackFlavors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameImagesResponse parses an HTTP response from a GetApiV1RegionsRegionNameImagesWithResponse call
func ParseGetApiV1RegionsRegionNameImagesResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OpenstackImages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
