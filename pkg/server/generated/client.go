// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Applications request
	GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Clustermanagers request
	GetApiV1Clustermanagers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Clusters request
	GetApiV1Clusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1Organization request
	DeleteApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Organization request
	PostApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Projects request
	GetApiV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Projects request with any body
	PostApiV1ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Projects(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ProjectsProjectName request
	DeleteApiV1ProjectsProjectName(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ProjectsProjectNameClustermanagers request with any body
	PostApiV1ProjectsProjectNameClustermanagersWithBody(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ProjectsProjectNameClustermanagers(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerName request
	DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ProjectsProjectNameClustermanagersClusterManagerName request with any body
	PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithBody(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ProjectsProjectNameClusters request with any body
	PostApiV1ProjectsProjectNameClustersWithBody(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ProjectsProjectNameClusters(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ProjectsProjectNameClustersClusterName request
	DeleteApiV1ProjectsProjectNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ProjectsProjectNameClustersClusterName request with any body
	PutApiV1ProjectsProjectNameClustersClusterNameWithBody(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ProjectsProjectNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ProjectsProjectNameClustersClusterNameKubeconfig request
	GetApiV1ProjectsProjectNameClustersClusterNameKubeconfig(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Regions request
	GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Applications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ApplicationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Clustermanagers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ClustermanagersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Clusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1OrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Organization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Projects(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ProjectsProjectName(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ProjectsProjectNameRequest(c.Server, projectName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameClustermanagersWithBody(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameClustermanagersRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameClustermanagers(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameClustermanagersRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequest(c.Server, projectName, clusterManagerName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithBody(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody(c.Server, projectName, clusterManagerName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameClustermanagersClusterManagerName(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequest(c.Server, projectName, clusterManagerName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameClustersWithBody(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameClustersRequestWithBody(c.Server, projectName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ProjectsProjectNameClusters(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ProjectsProjectNameClustersRequest(c.Server, projectName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ProjectsProjectNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ProjectsProjectNameClustersClusterNameRequest(c.Server, projectName, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameClustersClusterNameWithBody(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameClustersClusterNameRequestWithBody(c.Server, projectName, clusterName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ProjectsProjectNameClustersClusterName(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ProjectsProjectNameClustersClusterNameRequest(c.Server, projectName, clusterName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ProjectsProjectNameClustersClusterNameKubeconfig(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ProjectsProjectNameClustersClusterNameKubeconfigRequest(c.Server, projectName, clusterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Regions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameFlavors(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameFlavorsRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RegionsRegionNameImages(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RegionsRegionNameImagesRequest(c.Server, regionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ApplicationsRequest generates requests for GetApiV1Applications
func NewGetApiV1ApplicationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/applications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ClustermanagersRequest generates requests for GetApiV1Clustermanagers
func NewGetApiV1ClustermanagersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/clustermanagers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ClustersRequest generates requests for GetApiV1Clusters
func NewGetApiV1ClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiV1OrganizationRequest generates requests for DeleteApiV1Organization
func NewDeleteApiV1OrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OrganizationRequest generates requests for PostApiV1Organization
func NewPostApiV1OrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ProjectsRequest generates requests for GetApiV1Projects
func NewGetApiV1ProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ProjectsRequest calls the generic PostApiV1Projects builder with application/json body
func NewPostApiV1ProjectsRequest(server string, body PostApiV1ProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ProjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ProjectsRequestWithBody generates requests for PostApiV1Projects with any type of body
func NewPostApiV1ProjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ProjectsProjectNameRequest generates requests for DeleteApiV1ProjectsProjectName
func NewDeleteApiV1ProjectsProjectNameRequest(server string, projectName ProjectNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ProjectsProjectNameClustermanagersRequest calls the generic PostApiV1ProjectsProjectNameClustermanagers builder with application/json body
func NewPostApiV1ProjectsProjectNameClustermanagersRequest(server string, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustermanagersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ProjectsProjectNameClustermanagersRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostApiV1ProjectsProjectNameClustermanagersRequestWithBody generates requests for PostApiV1ProjectsProjectNameClustermanagers with any type of body
func NewPostApiV1ProjectsProjectNameClustermanagersRequestWithBody(server string, projectName ProjectNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clustermanagers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequest generates requests for DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerName
func NewDeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequest(server string, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterManagerName", runtime.ParamLocationPath, clusterManagerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clustermanagers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequest calls the generic PutApiV1ProjectsProjectNameClustermanagersClusterManagerName builder with application/json body
func NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequest(server string, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody(server, projectName, clusterManagerName, "application/json", bodyReader)
}

// NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody generates requests for PutApiV1ProjectsProjectNameClustermanagersClusterManagerName with any type of body
func NewPutApiV1ProjectsProjectNameClustermanagersClusterManagerNameRequestWithBody(server string, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterManagerName", runtime.ParamLocationPath, clusterManagerName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clustermanagers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1ProjectsProjectNameClustersRequest calls the generic PostApiV1ProjectsProjectNameClusters builder with application/json body
func NewPostApiV1ProjectsProjectNameClustersRequest(server string, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ProjectsProjectNameClustersRequestWithBody(server, projectName, "application/json", bodyReader)
}

// NewPostApiV1ProjectsProjectNameClustersRequestWithBody generates requests for PostApiV1ProjectsProjectNameClusters with any type of body
func NewPostApiV1ProjectsProjectNameClustersRequestWithBody(server string, projectName ProjectNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ProjectsProjectNameClustersClusterNameRequest generates requests for DeleteApiV1ProjectsProjectNameClustersClusterName
func NewDeleteApiV1ProjectsProjectNameClustersClusterNameRequest(server string, projectName ProjectNameParameter, clusterName ClusterNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ProjectsProjectNameClustersClusterNameRequest calls the generic PutApiV1ProjectsProjectNameClustersClusterName builder with application/json body
func NewPutApiV1ProjectsProjectNameClustersClusterNameRequest(server string, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameClustersClusterNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ProjectsProjectNameClustersClusterNameRequestWithBody(server, projectName, clusterName, "application/json", bodyReader)
}

// NewPutApiV1ProjectsProjectNameClustersClusterNameRequestWithBody generates requests for PutApiV1ProjectsProjectNameClustersClusterName with any type of body
func NewPutApiV1ProjectsProjectNameClustersClusterNameRequestWithBody(server string, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ProjectsProjectNameClustersClusterNameKubeconfigRequest generates requests for GetApiV1ProjectsProjectNameClustersClusterNameKubeconfig
func NewGetApiV1ProjectsProjectNameClustersClusterNameKubeconfigRequest(server string, projectName ProjectNameParameter, clusterName ClusterNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterName", runtime.ParamLocationPath, clusterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/projects/%s/clusters/%s/kubeconfig", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRequest generates requests for GetApiV1Regions
func NewGetApiV1RegionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameFlavorsRequest generates requests for GetApiV1RegionsRegionNameFlavors
func NewGetApiV1RegionsRegionNameFlavorsRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/flavors", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RegionsRegionNameImagesRequest generates requests for GetApiV1RegionsRegionNameImages
func NewGetApiV1RegionsRegionNameImagesRequest(server string, regionName RegionNameParameter) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionName", runtime.ParamLocationPath, regionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/regions/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1Applications request
	GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error)

	// GetApiV1Clustermanagers request
	GetApiV1ClustermanagersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ClustermanagersResponse, error)

	// GetApiV1Clusters request
	GetApiV1ClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ClustersResponse, error)

	// DeleteApiV1Organization request
	DeleteApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationResponse, error)

	// PostApiV1Organization request
	PostApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error)

	// GetApiV1Projects request
	GetApiV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsResponse, error)

	// PostApiV1Projects request with any body
	PostApiV1ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error)

	PostApiV1ProjectsWithResponse(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error)

	// DeleteApiV1ProjectsProjectName request
	DeleteApiV1ProjectsProjectNameWithResponse(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameResponse, error)

	// PostApiV1ProjectsProjectNameClustermanagers request with any body
	PostApiV1ProjectsProjectNameClustermanagersWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustermanagersResponse, error)

	PostApiV1ProjectsProjectNameClustermanagersWithResponse(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustermanagersResponse, error)

	// DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerName request
	DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error)

	// PutApiV1ProjectsProjectNameClustermanagersClusterManagerName request with any body
	PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error)

	PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error)

	// PostApiV1ProjectsProjectNameClusters request with any body
	PostApiV1ProjectsProjectNameClustersWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustersResponse, error)

	PostApiV1ProjectsProjectNameClustersWithResponse(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustersResponse, error)

	// DeleteApiV1ProjectsProjectNameClustersClusterName request
	DeleteApiV1ProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameClustersClusterNameResponse, error)

	// PutApiV1ProjectsProjectNameClustersClusterName request with any body
	PutApiV1ProjectsProjectNameClustersClusterNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustersClusterNameResponse, error)

	PutApiV1ProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustersClusterNameResponse, error)

	// GetApiV1ProjectsProjectNameClustersClusterNameKubeconfig request
	GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse, error)

	// GetApiV1Regions request
	GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error)

	// GetApiV1RegionsRegionNameFlavors request
	GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error)

	// GetApiV1RegionsRegionNameImages request
	GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error)
}

type GetApiV1ApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Applications
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ClustermanagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterManagers
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ClustermanagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ClustermanagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusters
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Projects
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ProjectsProjectNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ProjectsProjectNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ProjectsProjectNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ProjectsProjectNameClustermanagersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1ProjectsProjectNameClustermanagersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ProjectsProjectNameClustermanagersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ProjectsProjectNameClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON403      *Oauth2Error
	JSON409      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1ProjectsProjectNameClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ProjectsProjectNameClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ProjectsProjectNameClustersClusterNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ProjectsProjectNameClustersClusterNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ProjectsProjectNameClustersClusterNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ProjectsProjectNameClustersClusterNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r PutApiV1ProjectsProjectNameClustersClusterNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ProjectsProjectNameClustersClusterNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON404      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Regions
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameFlavorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Flavors
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameFlavorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameFlavorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RegionsRegionNameImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Images
	JSON400      *Oauth2Error
	JSON401      *Oauth2Error
	JSON500      *Oauth2Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1RegionsRegionNameImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RegionsRegionNameImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ApplicationsWithResponse request returning *GetApiV1ApplicationsResponse
func (c *ClientWithResponses) GetApiV1ApplicationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ApplicationsResponse, error) {
	rsp, err := c.GetApiV1Applications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ApplicationsResponse(rsp)
}

// GetApiV1ClustermanagersWithResponse request returning *GetApiV1ClustermanagersResponse
func (c *ClientWithResponses) GetApiV1ClustermanagersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ClustermanagersResponse, error) {
	rsp, err := c.GetApiV1Clustermanagers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ClustermanagersResponse(rsp)
}

// GetApiV1ClustersWithResponse request returning *GetApiV1ClustersResponse
func (c *ClientWithResponses) GetApiV1ClustersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ClustersResponse, error) {
	rsp, err := c.GetApiV1Clusters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ClustersResponse(rsp)
}

// DeleteApiV1OrganizationWithResponse request returning *DeleteApiV1OrganizationResponse
func (c *ClientWithResponses) DeleteApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiV1OrganizationResponse, error) {
	rsp, err := c.DeleteApiV1Organization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1OrganizationResponse(rsp)
}

// PostApiV1OrganizationWithResponse request returning *PostApiV1OrganizationResponse
func (c *ClientWithResponses) PostApiV1OrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1OrganizationResponse, error) {
	rsp, err := c.PostApiV1Organization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OrganizationResponse(rsp)
}

// GetApiV1ProjectsWithResponse request returning *GetApiV1ProjectsResponse
func (c *ClientWithResponses) GetApiV1ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsResponse, error) {
	rsp, err := c.GetApiV1Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ProjectsResponse(rsp)
}

// PostApiV1ProjectsWithBodyWithResponse request with arbitrary body returning *PostApiV1ProjectsResponse
func (c *ClientWithResponses) PostApiV1ProjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error) {
	rsp, err := c.PostApiV1ProjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ProjectsWithResponse(ctx context.Context, body PostApiV1ProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsResponse, error) {
	rsp, err := c.PostApiV1Projects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsResponse(rsp)
}

// DeleteApiV1ProjectsProjectNameWithResponse request returning *DeleteApiV1ProjectsProjectNameResponse
func (c *ClientWithResponses) DeleteApiV1ProjectsProjectNameWithResponse(ctx context.Context, projectName ProjectNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameResponse, error) {
	rsp, err := c.DeleteApiV1ProjectsProjectName(ctx, projectName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ProjectsProjectNameResponse(rsp)
}

// PostApiV1ProjectsProjectNameClustermanagersWithBodyWithResponse request with arbitrary body returning *PostApiV1ProjectsProjectNameClustermanagersResponse
func (c *ClientWithResponses) PostApiV1ProjectsProjectNameClustermanagersWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustermanagersResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameClustermanagersWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameClustermanagersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ProjectsProjectNameClustermanagersWithResponse(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustermanagersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustermanagersResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameClustermanagers(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameClustermanagersResponse(rsp)
}

// DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse request returning *DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse
func (c *ClientWithResponses) DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	rsp, err := c.DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerName(ctx, projectName, clusterManagerName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp)
}

// PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithBodyWithResponse request with arbitrary body returning *PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse
func (c *ClientWithResponses) PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithBody(ctx, projectName, clusterManagerName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterManagerName ClusterManagerNameParameter, body PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameClustermanagersClusterManagerName(ctx, projectName, clusterManagerName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp)
}

// PostApiV1ProjectsProjectNameClustersWithBodyWithResponse request with arbitrary body returning *PostApiV1ProjectsProjectNameClustersResponse
func (c *ClientWithResponses) PostApiV1ProjectsProjectNameClustersWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustersResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameClustersWithBody(ctx, projectName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameClustersResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ProjectsProjectNameClustersWithResponse(ctx context.Context, projectName ProjectNameParameter, body PostApiV1ProjectsProjectNameClustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ProjectsProjectNameClustersResponse, error) {
	rsp, err := c.PostApiV1ProjectsProjectNameClusters(ctx, projectName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ProjectsProjectNameClustersResponse(rsp)
}

// DeleteApiV1ProjectsProjectNameClustersClusterNameWithResponse request returning *DeleteApiV1ProjectsProjectNameClustersClusterNameResponse
func (c *ClientWithResponses) DeleteApiV1ProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*DeleteApiV1ProjectsProjectNameClustersClusterNameResponse, error) {
	rsp, err := c.DeleteApiV1ProjectsProjectNameClustersClusterName(ctx, projectName, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ProjectsProjectNameClustersClusterNameResponse(rsp)
}

// PutApiV1ProjectsProjectNameClustersClusterNameWithBodyWithResponse request with arbitrary body returning *PutApiV1ProjectsProjectNameClustersClusterNameResponse
func (c *ClientWithResponses) PutApiV1ProjectsProjectNameClustersClusterNameWithBodyWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustersClusterNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameClustersClusterNameWithBody(ctx, projectName, clusterName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameClustersClusterNameResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ProjectsProjectNameClustersClusterNameWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, body PutApiV1ProjectsProjectNameClustersClusterNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ProjectsProjectNameClustersClusterNameResponse, error) {
	rsp, err := c.PutApiV1ProjectsProjectNameClustersClusterName(ctx, projectName, clusterName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ProjectsProjectNameClustersClusterNameResponse(rsp)
}

// GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigWithResponse request returning *GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse
func (c *ClientWithResponses) GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigWithResponse(ctx context.Context, projectName ProjectNameParameter, clusterName ClusterNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse, error) {
	rsp, err := c.GetApiV1ProjectsProjectNameClustersClusterNameKubeconfig(ctx, projectName, clusterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse(rsp)
}

// GetApiV1RegionsWithResponse request returning *GetApiV1RegionsResponse
func (c *ClientWithResponses) GetApiV1RegionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1RegionsResponse, error) {
	rsp, err := c.GetApiV1Regions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsResponse(rsp)
}

// GetApiV1RegionsRegionNameFlavorsWithResponse request returning *GetApiV1RegionsRegionNameFlavorsResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameFlavorsWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameFlavors(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp)
}

// GetApiV1RegionsRegionNameImagesWithResponse request returning *GetApiV1RegionsRegionNameImagesResponse
func (c *ClientWithResponses) GetApiV1RegionsRegionNameImagesWithResponse(ctx context.Context, regionName RegionNameParameter, reqEditors ...RequestEditorFn) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	rsp, err := c.GetApiV1RegionsRegionNameImages(ctx, regionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RegionsRegionNameImagesResponse(rsp)
}

// ParseGetApiV1ApplicationsResponse parses an HTTP response from a GetApiV1ApplicationsWithResponse call
func ParseGetApiV1ApplicationsResponse(rsp *http.Response) (*GetApiV1ApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Applications
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ClustermanagersResponse parses an HTTP response from a GetApiV1ClustermanagersWithResponse call
func ParseGetApiV1ClustermanagersResponse(rsp *http.Response) (*GetApiV1ClustermanagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ClustermanagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterManagers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ClustersResponse parses an HTTP response from a GetApiV1ClustersWithResponse call
func ParseGetApiV1ClustersResponse(rsp *http.Response) (*GetApiV1ClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1OrganizationResponse parses an HTTP response from a DeleteApiV1OrganizationWithResponse call
func ParseDeleteApiV1OrganizationResponse(rsp *http.Response) (*DeleteApiV1OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1OrganizationResponse parses an HTTP response from a PostApiV1OrganizationWithResponse call
func ParsePostApiV1OrganizationResponse(rsp *http.Response) (*PostApiV1OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ProjectsResponse parses an HTTP response from a GetApiV1ProjectsWithResponse call
func ParseGetApiV1ProjectsResponse(rsp *http.Response) (*GetApiV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Projects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ProjectsResponse parses an HTTP response from a PostApiV1ProjectsWithResponse call
func ParsePostApiV1ProjectsResponse(rsp *http.Response) (*PostApiV1ProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ProjectsProjectNameResponse parses an HTTP response from a DeleteApiV1ProjectsProjectNameWithResponse call
func ParseDeleteApiV1ProjectsProjectNameResponse(rsp *http.Response) (*DeleteApiV1ProjectsProjectNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ProjectsProjectNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ProjectsProjectNameClustermanagersResponse parses an HTTP response from a PostApiV1ProjectsProjectNameClustermanagersWithResponse call
func ParsePostApiV1ProjectsProjectNameClustermanagersResponse(rsp *http.Response) (*PostApiV1ProjectsProjectNameClustermanagersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ProjectsProjectNameClustermanagersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse parses an HTTP response from a DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse call
func ParseDeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp *http.Response) (*DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse parses an HTTP response from a PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameWithResponse call
func ParsePutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse(rsp *http.Response) (*PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ProjectsProjectNameClustermanagersClusterManagerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ProjectsProjectNameClustersResponse parses an HTTP response from a PostApiV1ProjectsProjectNameClustersWithResponse call
func ParsePostApiV1ProjectsProjectNameClustersResponse(rsp *http.Response) (*PostApiV1ProjectsProjectNameClustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ProjectsProjectNameClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ProjectsProjectNameClustersClusterNameResponse parses an HTTP response from a DeleteApiV1ProjectsProjectNameClustersClusterNameWithResponse call
func ParseDeleteApiV1ProjectsProjectNameClustersClusterNameResponse(rsp *http.Response) (*DeleteApiV1ProjectsProjectNameClustersClusterNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ProjectsProjectNameClustersClusterNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiV1ProjectsProjectNameClustersClusterNameResponse parses an HTTP response from a PutApiV1ProjectsProjectNameClustersClusterNameWithResponse call
func ParsePutApiV1ProjectsProjectNameClustersClusterNameResponse(rsp *http.Response) (*PutApiV1ProjectsProjectNameClustersClusterNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ProjectsProjectNameClustersClusterNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse parses an HTTP response from a GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigWithResponse call
func ParseGetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse(rsp *http.Response) (*GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ProjectsProjectNameClustersClusterNameKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsResponse parses an HTTP response from a GetApiV1RegionsWithResponse call
func ParseGetApiV1RegionsResponse(rsp *http.Response) (*GetApiV1RegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Regions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameFlavorsResponse parses an HTTP response from a GetApiV1RegionsRegionNameFlavorsWithResponse call
func ParseGetApiV1RegionsRegionNameFlavorsResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameFlavorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameFlavorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Flavors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1RegionsRegionNameImagesResponse parses an HTTP response from a GetApiV1RegionsRegionNameImagesWithResponse call
func ParseGetApiV1RegionsRegionNameImagesResponse(rsp *http.Response) (*GetApiV1RegionsRegionNameImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RegionsRegionNameImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Images
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Oauth2Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
