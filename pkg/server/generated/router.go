// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/applications)
	GetApiV1Applications(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/organizations/{organization}/clustermanagers)
	GetApiV1OrganizationsOrganizationClustermanagers(w http.ResponseWriter, r *http.Request, organization OrganizationParameter)

	// (GET /api/v1/organizations/{organization}/clusters)
	GetApiV1OrganizationsOrganizationClusters(w http.ResponseWriter, r *http.Request, organization OrganizationParameter)

	// (POST /api/v1/organizations/{organization}/projects/{project}/clustermanagers)
	PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter)

	// (DELETE /api/v1/organizations/{organization}/projects/{project}/clustermanagers/{clusterManager})
	DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter)

	// (PUT /api/v1/organizations/{organization}/projects/{project}/clustermanagers/{clusterManager})
	PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter, clusterManager ClusterManagerParameter)

	// (POST /api/v1/organizations/{organization}/projects/{project}/clusters)
	PostApiV1OrganizationsOrganizationProjectsProjectClusters(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter)

	// (DELETE /api/v1/organizations/{organization}/projects/{project}/clusters/{cluster})
	DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter)

	// (PUT /api/v1/organizations/{organization}/projects/{project}/clusters/{cluster})
	PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter)

	// (GET /api/v1/organizations/{organization}/projects/{project}/clusters/{cluster}/kubeconfig)
	GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig(w http.ResponseWriter, r *http.Request, organization OrganizationParameter, project ProjectParameter, cluster ClusterParameter)

	// (GET /api/v1/regions)
	GetApiV1Regions(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/regions/{regionName}/flavors)
	GetApiV1RegionsRegionNameFlavors(w http.ResponseWriter, r *http.Request, regionName RegionNameParameter)

	// (GET /api/v1/regions/{regionName}/images)
	GetApiV1RegionsRegionNameImages(w http.ResponseWriter, r *http.Request, regionName RegionNameParameter)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Applications operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Applications(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Applications(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1OrganizationsOrganizationClustermanagers operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationClustermanagers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationClustermanagers(w, r, organization)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1OrganizationsOrganizationClusters operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationClusters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationClusters(w, r, organization)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers(w, r, organization, project)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "clusterManager" -------------
	var clusterManager ClusterManagerParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterManager", runtime.ParamLocationPath, chi.URLParam(r, "clusterManager"), &clusterManager)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterManager", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(w, r, organization, project, clusterManager)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "clusterManager" -------------
	var clusterManager ClusterManagerParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "clusterManager", runtime.ParamLocationPath, chi.URLParam(r, "clusterManager"), &clusterManager)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "clusterManager", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager(w, r, organization, project, clusterManager)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1OrganizationsOrganizationProjectsProjectClusters operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1OrganizationsOrganizationProjectsProjectClusters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1OrganizationsOrganizationProjectsProjectClusters(w, r, organization, project)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "cluster" -------------
	var cluster ClusterParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster", runtime.ParamLocationPath, chi.URLParam(r, "cluster"), &cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster(w, r, organization, project, cluster)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "cluster" -------------
	var cluster ClusterParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster", runtime.ParamLocationPath, chi.URLParam(r, "cluster"), &cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster(w, r, organization, project, cluster)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "organization" -------------
	var organization OrganizationParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "organization", runtime.ParamLocationPath, chi.URLParam(r, "organization"), &organization)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "organization", Err: err})
		return
	}

	// ------------- Path parameter "project" -------------
	var project ProjectParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "cluster" -------------
	var cluster ClusterParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster", runtime.ParamLocationPath, chi.URLParam(r, "cluster"), &cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig(w, r, organization, project, cluster)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Regions operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Regions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Regions(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1RegionsRegionNameFlavors operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1RegionsRegionNameFlavors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "regionName" -------------
	var regionName RegionNameParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "regionName", runtime.ParamLocationPath, chi.URLParam(r, "regionName"), &regionName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "regionName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1RegionsRegionNameFlavors(w, r, regionName)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1RegionsRegionNameImages operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1RegionsRegionNameImages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "regionName" -------------
	var regionName RegionNameParameter

	err = runtime.BindStyledParameterWithLocation("simple", false, "regionName", runtime.ParamLocationPath, chi.URLParam(r, "regionName"), &regionName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "regionName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1RegionsRegionNameImages(w, r, regionName)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/applications", wrapper.GetApiV1Applications)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organization}/clustermanagers", wrapper.GetApiV1OrganizationsOrganizationClustermanagers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organization}/clusters", wrapper.GetApiV1OrganizationsOrganizationClusters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clustermanagers", wrapper.PostApiV1OrganizationsOrganizationProjectsProjectClustermanagers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clustermanagers/{clusterManager}", wrapper.DeleteApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clustermanagers/{clusterManager}", wrapper.PutApiV1OrganizationsOrganizationProjectsProjectClustermanagersClusterManager)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clusters", wrapper.PostApiV1OrganizationsOrganizationProjectsProjectClusters)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clusters/{cluster}", wrapper.DeleteApiV1OrganizationsOrganizationProjectsProjectClustersCluster)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clusters/{cluster}", wrapper.PutApiV1OrganizationsOrganizationProjectsProjectClustersCluster)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/organizations/{organization}/projects/{project}/clusters/{cluster}/kubeconfig", wrapper.GetApiV1OrganizationsOrganizationProjectsProjectClustersClusterKubeconfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/regions", wrapper.GetApiV1Regions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/regions/{regionName}/flavors", wrapper.GetApiV1RegionsRegionNameFlavors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/regions/{regionName}/images", wrapper.GetApiV1RegionsRegionNameImages)
	})

	return r
}
