// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces.go -package mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	openapi "github.com/unikorn-cloud/kubernetes/pkg/openapi"
	openapi0 "github.com/unikorn-cloud/region/pkg/openapi"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Flavors mocks base method.
func (m *MockClientInterface) Flavors(ctx context.Context, organizationID, regionID string) ([]openapi0.Flavor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flavors", ctx, organizationID, regionID)
	ret0, _ := ret[0].([]openapi0.Flavor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Flavors indicates an expected call of Flavors.
func (mr *MockClientInterfaceMockRecorder) Flavors(ctx, organizationID, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flavors", reflect.TypeOf((*MockClientInterface)(nil).Flavors), ctx, organizationID, regionID)
}

// Get mocks base method.
func (m *MockClientInterface) Get(ctx context.Context, organizationID, regionID string) (*openapi0.RegionDetailRead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, organizationID, regionID)
	ret0, _ := ret[0].(*openapi0.RegionDetailRead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(ctx, organizationID, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), ctx, organizationID, regionID)
}

// Images mocks base method.
func (m *MockClientInterface) Images(ctx context.Context, organizationID, regionID string) ([]openapi0.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Images", ctx, organizationID, regionID)
	ret0, _ := ret[0].([]openapi0.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Images indicates an expected call of Images.
func (mr *MockClientInterfaceMockRecorder) Images(ctx, organizationID, regionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockClientInterface)(nil).Images), ctx, organizationID, regionID)
}

// List mocks base method.
func (m *MockClientInterface) List(ctx context.Context, organizationID string, params openapi.GetApiV1OrganizationsOrganizationIDRegionsParams) ([]openapi0.RegionRead, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, organizationID, params)
	ret0, _ := ret[0].([]openapi0.RegionRead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientInterfaceMockRecorder) List(ctx, organizationID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientInterface)(nil).List), ctx, organizationID, params)
}
