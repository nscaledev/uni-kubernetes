{{- if .Values.server.enabled -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
{{- with ( include "unikorn.imagePullSecrets" . ) }}
imagePullSecrets:
{{ . }}
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
rules:
# Orchestrate Unikorn resources (my job).
- apiGroups:
  - unikorn-cloud.org
  resources:
  - projects
  - controlplanes
  - kubernetesclusters
  verbs:
  - create
  - get
  - list
  - watch
  - patch
  - delete
- apiGroups:
  - unikorn-cloud.org
  resources:
  - controlplaneapplicationbundles
  - kubernetesclusterapplicationbundles
  - helmapplications
  verbs:
  - list
  - watch
# Get secrets, ugh, for kubeconfigs.
- apiGroups:
  - ""
  resources:
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
subjects:
- kind: ServiceAccount
  namespace: {{ .Release.Namespace }}
  name: unikorn-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: unikorn-server
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: unikorn-server-jose-tls
spec:
  issuerRef:
    kind: Issuer
    name: unikorn-server-jose
  privateKey:
    algorithm: ECDSA
    encoding: PKCS8
    size: 521
  commonName : Unikorn Server JOSE Key
  secretName: unikorn-server-jose-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: unikorn-server
  template:
    metadata:
      labels:
        app: unikorn-server
    spec:
      containers:
      - name: unikorn-server
        image: {{ include "unikorn.serverImage" . }}
        args:
        {{- with $oidc := .Values.server.oidc }}
        - --oidc-issuer={{ $oidc.issuer }}
          {{- if $oidc.issuerCA }}
          {{ printf "- --oidc-issuer-ca=%s" $oidc.issuerCA | nindent 8 }}
          {{- end }}
        {{- end }}
        {{- with $openstack := .Values.server.provider.openstack }}
          {{ printf "- --openstack-endpoint=%s" $openstack.endpoint | nindent 8 }}
          {{- with $secret := $openstack.serviceAccount.secret }}
            {{ printf "- --openstack-serviceaccount-secret=%s" $secret.name | nindent 8 }}
          {{- end }}
          {{- with $identity := $openstack.identity }}
            {{- range $roles := $identity.applicationCredentialRoles }}
              {{ printf "- --openstack-identity-application-credential-roles=%s" (join "," $roles) | nindent 8 }}
            {{- end }}
          {{- end }}
          {{- with $compute := $openstack.compute }}
            {{- with $policy := $compute.serverGroupPolicy }}
              {{ printf "- --openstack-servergroup-policy=%s" $policy | nindent 8 }}
            {{- end }}
            {{- with $props := $compute.flavorPropertiesExclude }}
              {{ printf "- --openstack-flavor-properties-exclude=%s" (join "," $props) | nindent 8 }}
            {{- end }}
            {{- range $desc := $compute.flavorGpuDescriptors }}
              {{ printf "- --openstack-flavor-gpu-descriptor=property=%s,expression=%s" $desc.property $desc.expression | nindent 8 }}
            {{- end }}
          {{- end }}
          {{- with $image := $openstack.image }}
            {{ with $props := $image.properties }}
              {{ printf "- --openstack-image-properties=%s" (join "," $props) | nindent 8 }}
            {{- end }}
            {{- with $key := $image.signingKey }}
              {{ printf "- --openstack-image-signing-key=%s" $key | nindent 8 }}
            {{- end }}
          {{- end }}
        {{- end }}

        {{- if .Values.server.imageSigningKey }}
        - --image-signing-key={{ .Values.server.imageSigningKey }}
        {{- end }}
        {{- with $properties := .Values.server.imageProperties -}}
          {{ printf "- --image-properties=%s" (join "," $properties) | nindent 8 }}
        {{- end }}
        {{- with $credentials := .Values.server.applicationCredentials -}}
          {{- with $roles := $credentials.roles -}}
            {{ printf "- --application-credential-roles=%s" (join "," $roles) | nindent 8 }}
          {{- end }}
        {{- end }}
        {{- if .Values.server.otlpEndpoint }}
          {{ printf "- --otlp-endpoint=%s" .Values.server.otlpEndpoint | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: 6080
        - name: prometheus
          containerPort: 8080
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        # Note, this is quite CPU intensive, especially when going wide!
        # TODO: profile me.
        resources:
          requests:
            cpu: "1"
            memory: 50Mi
          limits:
            cpu: "2"
            memory: 100Mi
        securityContext:
          readOnlyRootFilesystem: true
      serviceAccountName: unikorn-server
      securityContext:
        runAsNonRoot: true
---
apiVersion: v1
kind: Service
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
    {{- include "unikorn.prometheusLabels" (dict "job" "unikorn-server") | nindent 4 }}
spec:
  selector:
    app: unikorn-server
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: prometheus
    port: 8080
    targetPort: prometheus
{{- if (not .Values.server.ingress.annotations) }}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: unikorn-server-ingress
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
spec:
  selfSigned: {}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
  annotations:
  {{- if .Values.server.ingress.annotations }}
  {{ toYaml .Values.server.ingress.annotations | indent 2 }}
  {{- else }}
    cert-manager.io/issuer: "unikorn-server-ingress"
  {{- end }}
spec:
  ingressClassName: {{ .Values.server.ingress.ingressClass }}
  # For development you will want to add these names to /etc/hosts for the ingress
  # endpoint address.
  tls:
  - hosts:
    - {{ .Values.server.ingress.host }}
    secretName: unikorn-server-ingress-tls
  rules:
  # The the UI is written as a JAMstack application, so the API is accessed via
  # the same host to avoid CORS, and therefore uses routing to hit the correct
  # service.
  - host: {{ .Values.server.ingress.host }}
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: unikorn-server
            port:
              name: http
{{- if .Values.ui.enabled }}
      - path: /
        pathType: Prefix
        backend:
          service:
            name: unikorn-ui
            port:
              name: http
{{- end }}
{{- end }}
