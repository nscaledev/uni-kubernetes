{{- if .Values.server.enabled -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
{{- with ( include "unikorn.imagePullSecrets" . ) }}
imagePullSecrets:
{{ . }}
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
rules:
# Orchestrate Unikorn resources (my job).
- apiGroups:
  - unikorn-cloud.org
  resources:
  - clustermanagers
  - kubernetesclusters
  verbs:
  - create
  - get
  - list
  - watch
  - patch
  - delete
- apiGroups:
  - unikorn-cloud.org
  resources:
  - regions
  - clustermanagerapplicationbundles
  - kubernetesclusterapplicationbundles
  - helmapplications
  verbs:
  - list
  - watch
# Find project namespaces
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - list
  - watch
# Get secrets, ugh, for kubeconfigs.
- apiGroups:
  - ""
  resources:
  - secrets
  - services
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
subjects:
- kind: ServiceAccount
  namespace: {{ .Release.Namespace }}
  name: unikorn-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: unikorn-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: unikorn-server
  template:
    metadata:
      labels:
        app: unikorn-server
    spec:
      containers:
      - name: unikorn-server
        image: {{ include "unikorn.serverImage" . }}
        args:
        {{- with $cors := .Values.server.cors }}
          {{- range $origin := $cors.allowOrigin }}
            {{ printf "- --cors-allow-origin=%s" $origin | nindent 8 }}
          {{- end }}
          {{- if $cors.maxAge }}
            {{ printf "- --cors-max-age=%s" $cors.maxAge | nindent 8 }}
          {{- end }}
        {{- end }}
        {{- with $oidc := .Values.server.oidc }}
        - --oidc-issuer={{ $oidc.issuer }}
          {{- if $oidc.issuerCA }}
          {{ printf "- --oidc-issuer-ca=%s" $oidc.issuerCA | nindent 8 }}
          {{- end }}
        {{- end }}
        {{- if .Values.server.otlpEndpoint }}
          {{ printf "- --otlp-endpoint=%s" .Values.server.otlpEndpoint | nindent 8 }}
        {{- end }}
        ports:
        - name: http
          containerPort: 6080
        - name: prometheus
          containerPort: 8080
        # Note, this is quite CPU intensive, especially when going wide!
        # TODO: profile me.
        resources:
          requests:
            cpu: "1"
            memory: 50Mi
          limits:
            cpu: "2"
            memory: 100Mi
        securityContext:
          readOnlyRootFilesystem: true
      serviceAccountName: unikorn-server
      securityContext:
        runAsNonRoot: true
---
apiVersion: v1
kind: Service
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
    {{- include "unikorn.prometheusLabels" (dict "job" "unikorn-server") | nindent 4 }}
spec:
  selector:
    app: unikorn-server
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: prometheus
    port: 8080
    targetPort: prometheus
{{- if (not .Values.server.ingress.annotations) }}
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: unikorn-server-ingress
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
spec:
  selfSigned: {}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: unikorn-server
  labels:
    {{- include "unikorn.labels" . | nindent 4 }}
  annotations:
  {{- if .Values.server.ingress.clusterIssuer }}
    cert-manager.io/cluster-issuer: {{ .Values.server.ingress.clusterIssuer | indent 2 }}
  {{- else if .Values.server.ingress.issuer }}
    cert-manager.io/issuer: {{ .Values.server.ingress.issuer }}
  {{- else }}
    cert-manager.io/issuer: unikorn-server-ingress
  {{- end }}
  {{- if .Values.server.ingress.externalDns }}
    external-dns.alpha.kubernetes.io/hostname: {{ .Values.server.ingress.host }}
  {{- end }}
spec:
  ingressClassName: {{ .Values.server.ingress.class }}
  # For development you will want to add these names to /etc/hosts for the ingress
  # endpoint address.
  tls:
  - hosts:
    - {{ .Values.server.ingress.host }}
    secretName: unikorn-server-ingress-tls
  rules:
  # The the UI is written as a JAMstack application, so the API is accessed via
  # the same host to avoid CORS, and therefore uses routing to hit the correct
  # service.
  - host: {{ .Values.server.ingress.host }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: unikorn-server
            port:
              name: http
{{- end }}
